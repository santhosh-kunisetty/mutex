cscope 15 $HOME/Documents/xv6/ahmad-xv6               0000159240
	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

16 
	#STA_X
 0x8

17 
	#STA_E
 0x4

18 
	#STA_C
 0x4

19 
	#STA_W
 0x2

20 
	#STA_R
 0x2

21 
	#STA_A
 0x1

	@bio.c

23 
	~"ty≥s.h
"

24 
	~"defs.h
"

25 
	~"∑øm.h
"

26 
	~"•ölock.h
"

27 
	~"buf.h
"

30 
•ölock
 
	mlock
;

31 
buf
 
	mbuf
[
NBUF
];

35 
buf
 
	mhód
;

36 } 
	gbˇche
;

39 
	$böô
()

41 
buf
 *
b
;

43 
	`öôlock
(&
bˇche
.
lock
, "bcache");

47 
bˇche
.
hód
.
¥ev
 = &bcache.head;

48 
bˇche
.
hód
.
√xt
 = &bcache.head;

49 
b
 = 
bˇche
.
buf
; b < bˇche.buf+
NBUF
; b++){

50 
b
->
√xt
 = 
bˇche
.
hód
.next;

51 
b
->
¥ev
 = &
bˇche
.
hód
;

52 
b
->
dev
 = -1;

53 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

54 
bˇche
.
hód
.
√xt
 = 
b
;

56 
	}
}

61 
buf
*

62 
	$bgë
(
uöt
 
dev
, uöà
£˘‹
)

64 
buf
 *
b
;

66 
	`acquúe
(&
bˇche
.
lock
);

68 
lo›
:

70 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next){

71 if(
b
->
dev
 =dev && b->
£˘‹
 == sector){

72 if(!(
b
->
Êags
 & 
B_BUSY
)){

73 
b
->
Êags
 |
B_BUSY
;

74 
	`ªÀa£
(&
bˇche
.
lock
);

75  
b
;

77 
	`¶ìp
(
b
, &
bˇche
.
lock
);

78 
lo›
;

85 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev){

86 if((
b
->
Êags
 & 
B_BUSY
Ë=0 && (b->Êag†& 
B_DIRTY
) == 0){

87 
b
->
dev
 = dev;

88 
b
->
£˘‹
 = sector;

89 
b
->
Êags
 = 
B_BUSY
;

90 
	`ªÀa£
(&
bˇche
.
lock
);

91  
b
;

94 
	`∑nic
("bget:Ço buffers");

95 
	}
}

98 
buf
*

99 
	$bªad
(
uöt
 
dev
, uöà
£˘‹
)

101 
buf
 *
b
;

103 
b
 = 
	`bgë
(
dev
, 
£˘‹
);

104 if(!(
b
->
Êags
 & 
B_VALID
))

105 
	`idîw
(
b
);

106  
b
;

107 
	}
}

111 
	$bwrôe
(
buf
 *
b
)

113 if((
b
->
Êags
 & 
B_BUSY
) == 0)

114 
	`∑nic
("bwrite");

115 
b
->
Êags
 |
B_DIRTY
;

116 
	`idîw
(
b
);

117 
	}
}

122 
	$bªl£
(
buf
 *
b
)

124 if((
b
->
Êags
 & 
B_BUSY
) == 0)

125 
	`∑nic
("brelse");

127 
	`acquúe
(&
bˇche
.
lock
);

129 
b
->
√xt
->
¥ev
 = b->prev;

130 
b
->
¥ev
->
√xt
 = b->next;

131 
b
->
√xt
 = 
bˇche
.
hód
.next;

132 
b
->
¥ev
 = &
bˇche
.
hód
;

133 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

134 
bˇche
.
hód
.
√xt
 = 
b
;

136 
b
->
Êags
 &~
B_BUSY
;

137 
	`wakeup
(
b
);

139 
	`ªÀa£
(&
bˇche
.
lock
);

140 
	}
}

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

11 
	~"memœyout.h
"

13 
	#SECTSIZE
 512

	)

15 
ªad£g
(
uch¨
*, 
uöt
, uint);

18 
	$boŸmaö
()

20 
ñfhdr
 *
ñf
;

21 
¥oghdr
 *
ph
, *
ïh
;

22 (*
íåy
)();

23 
uch¨
* 
∑
;

25 
ñf
 = (
ñfhdr
*)0x10000;

28 
	`ªad£g
((
uch¨
*)
ñf
, 4096, 0);

31 if(
ñf
->
magic
 !
ELF_MAGIC
)

35 
ph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

36 
ïh
 = 
ph
 + 
ñf
->
phnum
;

37 ; 
ph
 < 
ïh
;Öh++){

38 
∑
 = (
uch¨
*)
ph
->
∑ddr
;

39 
	`ªad£g
(
∑
, 
ph
->
fûesz
,Öh->
off
);

40 if(
ph
->
memsz
 >Öh->
fûesz
)

41 
	`°osb
(
∑
 + 
ph
->
fûesz
, 0,Öh->
memsz
 -Öh->filesz);

46 
íåy
 = ((*)())(
ñf
->entry);

47 
	`íåy
();

48 
	}
}

51 
	$waôdisk
()

54 (
	`öb
(0x1F7) & 0xC0) != 0x40)

56 
	}
}

60 
	$ªad£˘
(*
d°
, 
uöt
 
off£t
)

63 
	`waôdisk
();

64 
	`outb
(0x1F2, 1);

65 
	`outb
(0x1F3, 
off£t
);

66 
	`outb
(0x1F4, 
off£t
 >> 8);

67 
	`outb
(0x1F5, 
off£t
 >> 16);

68 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

69 
	`outb
(0x1F7, 0x20);

72 
	`waôdisk
();

73 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

74 
	}
}

79 
	$ªad£g
(
uch¨
* 
∑
, 
uöt
 
cou¡
, uöà
off£t
)

81 
uch¨
* 
ïa
;

83 
ïa
 = 
∑
 + 
cou¡
;

86 
∑
 -
off£t
 % 
SECTSIZE
;

89 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

94 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
++)

95 
	`ªad£˘
(
∑
, 
off£t
);

96 
	}
}

	@buf.h

1 
	sbuf
 {

2 
	mÊags
;

3 
uöt
 
	mdev
;

4 
uöt
 
	m£˘‹
;

5 
buf
 *
	m¥ev
;

6 
buf
 *
	m√xt
;

7 
buf
 *
	mq√xt
;

8 
uch¨
 
	md©a
[512];

10 
	#B_BUSY
 0x1

11 
	#B_VALID
 0x2

12 
	#B_DIRTY
 0x4

13 

	)

	@callparent.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	$maö
(){

7 
	`∑ª¡
();

8 
	`¥ötf
(1, "Hello World\n");

9 
	`exô
();

11 
	}
}

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"fs.h
"

11 
	~"fûe.h
"

12 
	~"memœyout.h
"

13 
	~"mmu.h
"

14 
	~"¥oc.h
"

15 
	~"x86.h
"

17 
c⁄•utc
();

19 
	g∑nicked
 = 0;

22 
•ölock
 
	mlock
;

23 
	mlockög
;

24 } 
	gc⁄s
;

27 
	$¥ötöt
(
xx
, 
ba£
, 
sign
)

29 
digôs
[] = "0123456789abcdef";

30 
buf
[16];

31 
i
;

32 
uöt
 
x
;

34 if(
sign
 && (sig¿
xx
 < 0))

35 
x
 = -
xx
;

37 
x
 = 
xx
;

39 
i
 = 0;

41 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

42 }(
x
 /
ba£
) != 0);

44 if(
sign
)

45 
buf
[
i
++] = '-';

47 --
i
 >= 0)

48 
	`c⁄•utc
(
buf
[
i
]);

49 
	}
}

54 
	$˝rötf
(*
fmt
, ...)

56 
i
, 
c
, 
lockög
;

57 
uöt
 *
¨gp
;

58 *
s
;

60 
lockög
 = 
c⁄s
.locking;

61 if(
lockög
)

62 
	`acquúe
(&
c⁄s
.
lock
);

64 i‡(
fmt
 == 0)

65 
	`∑nic
("null fmt");

67 
¨gp
 = (
uöt
*)(*)(&
fmt
 + 1);

68 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++){

69 if(
c
 != '%'){

70 
	`c⁄•utc
(
c
);

73 
c
 = 
fmt
[++
i
] & 0xff;

74 if(
c
 == 0)

76 
c
){

78 
	`¥ötöt
(*
¨gp
++, 10, 1);

82 
	`¥ötöt
(*
¨gp
++, 16, 0);

85 if((
s
 = (*)*
¨gp
++) == 0)

86 
s
 = "(null)";

87 ; *
s
; s++)

88 
	`c⁄•utc
(*
s
);

91 
	`c⁄•utc
('%');

95 
	`c⁄•utc
('%');

96 
	`c⁄•utc
(
c
);

101 if(
lockög
)

102 
	`ªÀa£
(&
c⁄s
.
lock
);

103 
	}
}

106 
	$∑nic
(*
s
)

108 
i
;

109 
uöt
 
pcs
[10];

111 
	`˛i
();

112 
c⁄s
.
lockög
 = 0;

113 
	`˝rötf
("˝u%d:Ö™ic: ", 
˝u
->
id
);

114 
	`˝rötf
(
s
);

115 
	`˝rötf
("\n");

116 
	`gëˇŒîpcs
(&
s
, 
pcs
);

117 
i
=0; i<10; i++)

118 
	`˝rötf
(" %p", 
pcs
[
i
]);

119 
∑nicked
 = 1;

122 
	}
}

125 
	#BACKSPACE
 0x100

	)

126 
	#CRTPORT
 0x3d4

	)

127 
ush‹t
 *
	g¸t
 = (ush‹t*)
P2V
(0xb8000);

130 
	$cg≠utc
(
c
)

132 
pos
;

135 
	`outb
(
CRTPORT
, 14);

136 
pos
 = 
	`öb
(
CRTPORT
+1) << 8;

137 
	`outb
(
CRTPORT
, 15);

138 
pos
 |
	`öb
(
CRTPORT
+1);

140 if(
c
 == '\n')

141 
pos
 += 80 -Öos%80;

142 if(
c
 =
BACKSPACE
){

143 if(
pos
 > 0) --pos;

145 
¸t
[
pos
++] = (
c
&0xff) | 0x0700;

147 if((
pos
/80) >= 24){

148 
	`memmove
(
¸t
, crt+80, (crt[0])*23*80);

149 
pos
 -= 80;

150 
	`mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

153 
	`outb
(
CRTPORT
, 14);

154 
	`outb
(
CRTPORT
+1, 
pos
>>8);

155 
	`outb
(
CRTPORT
, 15);

156 
	`outb
(
CRTPORT
+1, 
pos
);

157 
¸t
[
pos
] = ' ' | 0x0700;

158 
	}
}

161 
	$c⁄•utc
(
c
)

163 if(
∑nicked
){

164 
	`˛i
();

169 if(
c
 =
BACKSPACE
){

170 
	`u¨çutc
('\b'); uartputc(' '); uartputc('\b');

172 
	`u¨çutc
(
c
);

173 
	`cg≠utc
(
c
);

174 
	}
}

176 
	#INPUT_BUF
 128

	)

178 
•ölock
 
	mlock
;

179 
	mbuf
[
INPUT_BUF
];

180 
uöt
 
	mr
;

181 
uöt
 
	mw
;

182 
uöt
 
	me
;

183 } 
	göput
;

185 
	#C
(
x
) ((x)-'@')

186 

	)

188 
c⁄sﬁeöå
((*
gëc
)())

190 
c
;

192 
	`acquúe
(&
öput
.
lock
);

193 (
c
 = 
	`gëc
()) >= 0){

194 
c
){

195 
	`C
('P'):

196 
	`¥ocdump
();

198 
	`C
('U'):

199 
öput
.
e
 !öput.
w
 &&

200 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

201 
öput
.
e
--;

202 
	`c⁄•utc
(
BACKSPACE
);

205 
	`C
('H'): '\x7f':

206 if(
öput
.
e
 !öput.
w
){

207 
öput
.
e
--;

208 
	`c⁄•utc
(
BACKSPACE
);

212 if(
c
 !0 && 
öput
.
e
-öput.
r
 < 
INPUT_BUF
){

213 
c
 = (c == '\r') ? '\n' : c;

214 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

215 
	`c⁄•utc
(
c
);

216 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

217 
öput
.
w
 = i≈ut.
e
;

218 
	`wakeup
(&
öput
.
r
);

224 
	`ªÀa£
(&
öput
.
lock
);

225 
	}
}

228 
	$c⁄sﬁîód
(
öode
 *
ù
, *
d°
, 
n
)

230 
uöt
 
èrgë
;

231 
c
;

233 
	`iu∆ock
(
ù
);

234 
èrgë
 = 
n
;

235 
	`acquúe
(&
öput
.
lock
);

236 
n
 > 0){

237 
öput
.
r
 =öput.
w
){

238 if(
¥oc
->
kûÀd
){

239 
	`ªÀa£
(&
öput
.
lock
);

240 
	`ûock
(
ù
);

243 
	`¶ìp
(&
öput
.
r
, &öput.
lock
);

245 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

246 if(
c
 =
	`C
('D')){

247 if(
n
 < 
èrgë
){

250 
öput
.
r
--;

254 *
d°
++ = 
c
;

255 --
n
;

256 if(
c
 == '\n')

259 
	`ªÀa£
(&
öput
.
lock
);

260 
	`ûock
(
ù
);

262  
èrgë
 - 
n
;

263 
	}
}

266 
	$c⁄sﬁewrôe
(
öode
 *
ù
, *
buf
, 
n
)

268 
i
;

270 
	`iu∆ock
(
ù
);

271 
	`acquúe
(&
c⁄s
.
lock
);

272 
i
 = 0; i < 
n
; i++)

273 
	`c⁄•utc
(
buf
[
i
] & 0xff);

274 
	`ªÀa£
(&
c⁄s
.
lock
);

275 
	`ûock
(
ù
);

277  
n
;

278 
	}
}

281 
	$c⁄sﬁeöô
()

283 
	`öôlock
(&
c⁄s
.
lock
, "console");

284 
	`öôlock
(&
öput
.
lock
, "input");

286 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

287 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

288 
c⁄s
.
lockög
 = 1;

290 
	`pi˚«bÀ
(
IRQ_KBD
);

291 
	`iﬂpi˚«bÀ
(
IRQ_KBD
, 0);

292 
	}
}

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g°©
;

9 
	gsu≥rblock
;

12 
böô
();

13 
buf
* 
bªad
(
uöt
, uint);

14 
bªl£
(
buf
*);

15 
bwrôe
(
buf
*);

18 
c⁄sﬁeöô
();

19 
˝rötf
(*, ...);

20 
c⁄sﬁeöå
((*)());

21 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

24 
	`exec
(*, **);

27 
fûe
* 
	`fûóŒoc
();

28 
	`fûe˛o£
(
fûe
*);

29 
fûe
* 
	`fûedup
(file*);

30 
	`fûeöô
();

31 
	`fûîód
(
fûe
*, *, 
n
);

32 
	`fûe°©
(
fûe
*, 
°©
*);

33 
	`fûewrôe
(
fûe
*, *, 
n
);

36 
	`ªadsb
(
dev
, 
su≥rblock
 *
sb
);

37 
	`dúlök
(
öode
*, *, 
uöt
);

38 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

39 
öode
* 
	`üŒoc
(
uöt
, );

40 
öode
* 
	`idup
(inode*);

41 
	`iöô
();

42 
	`ûock
(
öode
*);

43 
	`ùut
(
öode
*);

44 
	`iu∆ock
(
öode
*);

45 
	`iu∆ockput
(
öode
*);

46 
	`iupd©e
(
öode
*);

47 
	`«mecmp
(const *, const *);

48 
öode
* 
	`«mei
(*);

49 
öode
* 
	`«meù¨ít
(*, *);

50 
	`ªadi
(
öode
*, *, 
uöt
, uint);

51 
	`°©i
(
öode
*, 
°©
*);

52 
	`wrôei
(
öode
*, *, 
uöt
, uint);

55 
	`ideöô
();

56 
	`ideöå
();

57 
	`idîw
(
buf
*);

60 
	`iﬂpi˚«bÀ
(
úq
, 
˝u
);

61 
uch¨
 
iﬂpicid
;

62 
	`iﬂpicöô
();

65 * 
	`kÆloc
();

66 
	`k‰ì
(*);

67 
	`köô1
(*, *);

68 
	`köô2
(*, *);

71 
	`kbdöå
();

74 
	`˝unum
();

75 vﬁ©ûê
uöt
* 
œpic
;

76 
	`œpi˚oi
();

77 
	`œpicöô
();

78 
	`œpic°¨èp
(
uch¨
, 
uöt
);

79 
	`mi¸odñay
();

82 
	`öôlog
();

83 
	`log_wrôe
(
buf
*);

84 
	`begö_›
();

85 
	`íd_›
();

88 
ismp
;

89 
	`mpb˝u
();

90 
	`mpöô
();

91 
	`mp°¨âhem
();

94 
	`pi˚«bÀ
();

95 
	`picöô
();

98 
	`pùóŒoc
(
fûe
**, file**);

99 
	`pùe˛o£
(
pùe
*, );

100 
	`pùîód
(
pùe
*, *, );

101 
	`pùewrôe
(
pùe
*, *, );

105 
¥oc
* 
	`c›y¥oc
(proc*);

106 
	`exô
();

107 
	`f‹k
(*, 
uöt
, uint, uint);

108 
	`grow¥oc
();

109 
	`kûl
();

110 
	`pöô
();

111 
	`¥ocdump
();

112 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

113 
	`sched
();

114 
	`¶ìp
(*, 
•ölock
*);

115 
	`u£röô
();

116 
	`waô
(
uöt
);

117 
	`wakeup
(*);

118 
	`yõld
();

121 
	`swtch
(
c⁄ãxt
**, context*);

124 
	`acquúe
(
•ölock
*);

125 
	`gëˇŒîpcs
(*, 
uöt
*);

126 
	`hﬁdög
(
•ölock
*);

127 
	`öôlock
(
•ölock
*, *);

128 
	`ªÀa£
(
•ölock
*);

129 
	`push˛i
();

130 
	`p›˛i
();

133 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

134 * 
	`memmove
(*, c⁄° *, 
uöt
);

135 * 
	`mem£t
(*, , 
uöt
);

136 * 
	`ß„°r˝y
(*, const *, );

137 
	`°æí
(const *);

138 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

139 * 
	`°∫˝y
(*, const *, );

142 
	`¨göt
(, *);

143 
	`¨g±r
(, **, );

144 
	`¨g°r
(, **);

145 
	`„tchöt
(
uöt
, *);

146 
	`„tch°r
(
uöt
, **);

147 
	`sysˇŒ
();

150 
	`timîöô
();

153 
	`idtöô
();

154 
uöt
 
ticks
;

155 
	`tvöô
();

156 
•ölock
 
tick¶ock
;

159 
	`u¨töô
();

160 
	`u¨töå
();

161 
	`u¨çutc
();

164 
	`£göô
();

165 
	`kvmÆloc
();

166 
	`vmíabÀ
();

167 
pde_t
* 
	`£tupkvm
();

168 * 
	`uva2ka
(
pde_t
*, *);

169 
	`Ælocuvm
(
pde_t
*, 
uöt
, uint);

170 
	`dóŒocuvm
(
pde_t
*, 
uöt
, uint);

171 
	`‰ìvm
(
pde_t
*);

172 
	`öôuvm
(
pde_t
*, *, 
uöt
);

173 
	`lﬂduvm
(
pde_t
*, *, 
öode
*, 
uöt
, uint);

174 
pde_t
* 
	`c›yuvm
’de_t*, 
uöt
);

175 
	`swôchuvm
(
¥oc
*);

176 
	`swôchkvm
();

177 
	`c›yout
(
pde_t
*, 
uöt
, *, uint);

178 
	`˛óΩãu
(
pde_t
 *
pgdú
, *
uva
);

181 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
(1, "%s%s", 
¨gv
[
i
], i+1 < 
¨gc
 ? " " : "\n");

12 
	`exô
();

13 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt
 
	míåy
;

13 
uöt
 
	mphoff
;

14 
uöt
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt
 
	mty≥
;

27 
uöt
 
	moff
;

28 
uöt
 
	mvaddr
;

29 
uöt
 
	m∑ddr
;

30 
uöt
 
	mfûesz
;

31 
uöt
 
	mmemsz
;

32 
uöt
 
	mÊags
;

33 
uöt
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"defs.h
"

7 
	~"x86.h
"

8 
	~"ñf.h
"

11 
	$exec
(*
∑th
, **
¨gv
)

13 *
s
, *
œ°
;

14 
i
, 
off
;

15 
uöt
 
¨gc
, 
sz
, 
•
, 
u°ack
[3+
MAXARG
+1];

16 
ñfhdr
 
ñf
;

17 
öode
 *
ù
;

18 
¥oghdr
 
ph
;

19 
pde_t
 *
pgdú
, *
ﬁdpgdú
;

21 
	`begö_›
();

22 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

23 
	`íd_›
();

26 
	`ûock
(
ù
);

27 
pgdú
 = 0;

30 if(
	`ªadi
(
ù
, (*)&
ñf
, 0, (elf)) < (elf))

31 
bad
;

32 if(
ñf
.
magic
 !
ELF_MAGIC
)

33 
bad
;

35 if((
pgdú
 = 
	`£tupkvm
()) == 0)

36 
bad
;

39 
sz
 = 0;

40 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

41 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

42 
bad
;

43 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

45 if(
ph
.
memsz
 <Öh.
fûesz
)

46 
bad
;

47 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

48 
bad
;

49 if(
	`lﬂduvm
(
pgdú
, (*)
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

50 
bad
;

52 
	`iu∆ockput
(
ù
);

53 
	`íd_›
();

54 
ù
 = 0;

58 
sz
 = 
	`PGROUNDUP
(sz);

59 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, sz + 2*
PGSIZE
)) == 0)

60 
bad
;

61 
	`˛óΩãu
(
pgdú
, (*)(
sz
 - 2*
PGSIZE
));

62 
•
 = 
sz
;

65 
¨gc
 = 0; 
¨gv
[argc];árgc++) {

66 if(
¨gc
 >
MAXARG
)

67 
bad
;

68 
•
 = (• - (
	`°æí
(
¨gv
[
¨gc
]) + 1)) & ~3;

69 if(
	`c›yout
(
pgdú
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
(argv[argc]) + 1) < 0)

70 
bad
;

71 
u°ack
[3+
¨gc
] = 
•
;

73 
u°ack
[3+
¨gc
] = 0;

75 
u°ack
[0] = 0xffffffff;

76 
u°ack
[1] = 
¨gc
;

77 
u°ack
[2] = 
•
 - (
¨gc
+1)*4;

79 
•
 -(3+
¨gc
+1) * 4;

80 if(
	`c›yout
(
pgdú
, 
•
, 
u°ack
, (3+
¨gc
+1)*4) < 0)

81 
bad
;

84 
œ°
=
s
=
∑th
; *s; s++)

85 if(*
s
 == '/')

86 
œ°
 = 
s
+1;

87 
	`ß„°r˝y
(
¥oc
->
«me
, 
œ°
, (proc->name));

90 
ﬁdpgdú
 = 
¥oc
->
pgdú
;

91 
¥oc
->
pgdú
 =Ögdir;

92 
¥oc
->
sz
 = sz;

93 
¥oc
->
tf
->
eù
 = 
ñf
.
íåy
;

94 
¥oc
->
tf
->
e•
 = 
•
;

95 
	`swôchuvm
(
¥oc
);

96 
	`‰ìvm
(
ﬁdpgdú
);

99 
bad
:

100 if(
pgdú
)

101 
	`‰ìvm
(
pgdú
);

102 if(
ù
){

103 
	`iu∆ockput
(
ù
);

104 
	`íd_›
();

107 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"•ölock.h
"

12 
devsw
 
	gdevsw
[
NDEV
];

14 
•ölock
 
	mlock
;

15 
fûe
 
	mfûe
[
NFILE
];

16 } 
	g·abÀ
;

19 
	$fûeöô
()

21 
	`öôlock
(&
·abÀ
.
lock
, "ftable");

22 
	}
}

25 
fûe
*

26 
	$fûóŒoc
()

28 
fûe
 *
f
;

30 
	`acquúe
(&
·abÀ
.
lock
);

31 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++){

32 if(
f
->
ªf
 == 0){

33 
f
->
ªf
 = 1;

34 
	`ªÀa£
(&
·abÀ
.
lock
);

35  
f
;

38 
	`ªÀa£
(&
·abÀ
.
lock
);

40 
	}
}

43 
fûe
*

44 
	$fûedup
(
fûe
 *
f
)

46 
	`acquúe
(&
·abÀ
.
lock
);

47 if(
f
->
ªf
 < 1)

48 
	`∑nic
("filedup");

49 
f
->
ªf
++;

50 
	`ªÀa£
(&
·abÀ
.
lock
);

51  
f
;

52 
	}
}

56 
	$fûe˛o£
(
fûe
 *
f
)

58 
fûe
 
ff
;

60 
	`acquúe
(&
·abÀ
.
lock
);

61 if(
f
->
ªf
 < 1)

62 
	`∑nic
("fileclose");

63 if(--
f
->
ªf
 > 0){

64 
	`ªÀa£
(&
·abÀ
.
lock
);

67 
ff
 = *
f
;

68 
f
->
ªf
 = 0;

69 
f
->
ty≥
 = 
FD_NONE
;

70 
	`ªÀa£
(&
·abÀ
.
lock
);

72 if(
ff
.
ty≥
 =
FD_PIPE
)

73 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

74 if(
ff
.
ty≥
 =
FD_INODE
){

75 
	`begö_›
();

76 
	`ùut
(
ff
.
ù
);

77 
	`íd_›
();

79 
	}
}

83 
	$fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

85 if(
f
->
ty≥
 =
FD_INODE
){

86 
	`ûock
(
f
->
ù
);

87 
	`°©i
(
f
->
ù
, 
°
);

88 
	`iu∆ock
(
f
->
ù
);

92 
	}
}

96 
	$fûîód
(
fûe
 *
f
, *
addr
, 
n
)

98 
r
;

100 if(
f
->
ªadabÀ
 == 0)

102 if(
f
->
ty≥
 =
FD_PIPE
)

103  
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

104 if(
f
->
ty≥
 =
FD_INODE
){

105 
	`ûock
(
f
->
ù
);

106 if((
r
 = 
	`ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

107 
f
->
off
 +
r
;

108 
	`iu∆ock
(
f
->
ù
);

109  
r
;

111 
	`∑nic
("fileread");

112 
	}
}

117 
	$fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

119 
r
;

121 if(
f
->
wrôabÀ
 == 0)

123 if(
f
->
ty≥
 =
FD_PIPE
)

124  
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

125 if(
f
->
ty≥
 =
FD_INODE
){

132 
max
 = ((
LOGSIZE
-1-1-2) / 2) * 512;

133 
i
 = 0;

134 
i
 < 
n
){

135 
n1
 = 
n
 - 
i
;

136 if(
n1
 > 
max
)

137 
n1
 = 
max
;

139 
	`begö_›
();

140 
	`ûock
(
f
->
ù
);

141 i‡((
r
 = 
	`wrôei
(
f
->
ù
, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

142 
f
->
off
 +
r
;

143 
	`iu∆ock
(
f
->
ù
);

144 
	`íd_›
();

146 if(
r
 < 0)

148 if(
r
 !
n1
)

149 
	`∑nic
("short filewrite");

150 
i
 +
r
;

152  
i
 =
n
 ?Ç : -1;

154 
	`∑nic
("filewrite");

155 
	}
}

	@file.h

1 
	sfûe
 {

2 íum { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
pùe
 *
	mpùe
;

7 
öode
 *
	mù
;

8 
uöt
 
	moff
;

13 
	söode
 {

14 
uöt
 
	mdev
;

15 
uöt
 
	möum
;

16 
	mªf
;

17 
	mÊags
;

19 
	mty≥
;

20 
	mmaj‹
;

21 
	mmö‹
;

22 
	m∆ök
;

23 
uöt
 
	msize
;

24 
uöt
 
	maddrs
[
NDIRECT
+1];

26 
	#I_BUSY
 0x1

	)

27 
	#I_VALID
 0x2

	)

31 
	sdevsw
 {

32 (*
	mªad
)(
	möode
*, *, );

33 (*
	mwrôe
)(
	möode
*, *, );

36 
devsw
 devsw[];

38 
	#CONSOLE
 1

	)

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

8 
	#N
 1000

	)

11 
	$¥ötf
(
fd
, *
s
, ...)

13 
	`wrôe
(
fd
, 
s
, 
	`°æí
(s));

14 
	}
}

17 
	$f‹kã°
()

19 
n
, 
pid
;

21 
	`¥ötf
(1, "forkÅest\n");

23 
n
=0;Ç<
N
;Ç++){

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0)

27 if(
pid
 == 0)

28 
	`exô
();

31 if(
n
 =
N
){

32 
	`¥ötf
(1, "f‹k cœimedÅÿw‹k NÅimes!\n", 
N
);

33 
	`exô
();

36 ; 
n
 > 0;Ç--){

37 if(
	`waô
() < 0){

38 
	`¥ötf
(1, "wait stoppedÉarly\n");

39 
	`exô
();

43 if(
	`waô
() != -1){

44 
	`¥ötf
(1, "wait gotÅoo many\n");

45 
	`exô
();

48 
	`¥ötf
(1, "forkÅest OK\n");

49 
	}
}

52 
	$maö
()

54 
	`f‹kã°
();

55 
	`exô
();

56 
	}
}

	@fs.c

12 
	~"ty≥s.h
"

13 
	~"defs.h
"

14 
	~"∑øm.h
"

15 
	~"°©.h
"

16 
	~"mmu.h
"

17 
	~"¥oc.h
"

18 
	~"•ölock.h
"

19 
	~"buf.h
"

20 
	~"fs.h
"

21 
	~"fûe.h
"

23 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
ôrunc
(
öode
*);

28 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

30 
buf
 *
bp
;

32 
bp
 = 
	`bªad
(
dev
, 1);

33 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

34 
	`bªl£
(
bp
);

35 
	}
}

39 
	$bzîo
(
dev
, 
bno
)

41 
buf
 *
bp
;

43 
bp
 = 
	`bªad
(
dev
, 
bno
);

44 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

45 
	`log_wrôe
(
bp
);

46 
	`bªl£
(
bp
);

47 
	}
}

52 
uöt


53 
	$bÆloc
(
uöt
 
dev
)

55 
b
, 
bi
, 
m
;

56 
buf
 *
bp
;

57 
su≥rblock
 
sb
;

59 
bp
 = 0;

60 
	`ªadsb
(
dev
, &
sb
);

61 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

62 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

63 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++){

64 
m
 = 1 << (
bi
 % 8);

65 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

66 
bp
->
d©a
[
bi
/8] |
m
;

67 
	`log_wrôe
(
bp
);

68 
	`bªl£
(
bp
);

69 
	`bzîo
(
dev
, 
b
 + 
bi
);

70  
b
 + 
bi
;

73 
	`bªl£
(
bp
);

75 
	`∑nic
("balloc: out of blocks");

76 
	}
}

80 
	$b‰ì
(
dev
, 
uöt
 
b
)

82 
buf
 *
bp
;

83 
su≥rblock
 
sb
;

84 
bi
, 
m
;

86 
	`ªadsb
(
dev
, &
sb
);

87 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

88 
bi
 = 
b
 % 
BPB
;

89 
m
 = 1 << (
bi
 % 8);

90 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

91 
	`∑nic
("freeing free block");

92 
bp
->
d©a
[
bi
/8] &~
m
;

93 
	`log_wrôe
(
bp
);

94 
	`bªl£
(
bp
);

95 
	}
}

160 
•ölock
 
	mlock
;

161 
öode
 
	möode
[
NINODE
];

162 } 
	giˇche
;

165 
	$iöô
()

167 
	`öôlock
(&
iˇche
.
lock
, "icache");

168 
	}
}

170 
öode
* 
igë
(
uöt
 
dev
, uöà
öum
);

175 
öode
*

176 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

178 
öum
;

179 
buf
 *
bp
;

180 
döode
 *
dù
;

181 
su≥rblock
 
sb
;

183 
	`ªadsb
(
dev
, &
sb
);

185 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

186 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
));

187 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

188 if(
dù
->
ty≥
 == 0){

189 
	`mem£t
(
dù
, 0, (*dip));

190 
dù
->
ty≥
 =Åype;

191 
	`log_wrôe
(
bp
);

192 
	`bªl£
(
bp
);

193  
	`igë
(
dev
, 
öum
);

195 
	`bªl£
(
bp
);

197 
	`∑nic
("ialloc:Ço inodes");

198 
	}
}

202 
	$iupd©e
(
öode
 *
ù
)

204 
buf
 *
bp
;

205 
döode
 *
dù
;

207 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

208 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

209 
dù
->
ty≥
 = 
ù
->type;

210 
dù
->
maj‹
 = 
ù
->major;

211 
dù
->
mö‹
 = 
ù
->minor;

212 
dù
->
∆ök
 = 
ù
->nlink;

213 
dù
->
size
 = 
ù
->size;

214 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

215 
	`log_wrôe
(
bp
);

216 
	`bªl£
(
bp
);

217 
	}
}

222 
öode
*

223 
	$igë
(
uöt
 
dev
, uöà
öum
)

225 
öode
 *
ù
, *
em±y
;

227 
	`acquúe
(&
iˇche
.
lock
);

230 
em±y
 = 0;

231 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

232 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

233 
ù
->
ªf
++;

234 
	`ªÀa£
(&
iˇche
.
lock
);

235  
ù
;

237 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

238 
em±y
 = 
ù
;

242 if(
em±y
 == 0)

243 
	`∑nic
("iget:Ço inodes");

245 
ù
 = 
em±y
;

246 
ù
->
dev
 = dev;

247 
ù
->
öum
 = inum;

248 
ù
->
ªf
 = 1;

249 
ù
->
Êags
 = 0;

250 
	`ªÀa£
(&
iˇche
.
lock
);

252  
ù
;

253 
	}
}

257 
öode
*

258 
	$idup
(
öode
 *
ù
)

260 
	`acquúe
(&
iˇche
.
lock
);

261 
ù
->
ªf
++;

262 
	`ªÀa£
(&
iˇche
.
lock
);

263  
ù
;

264 
	}
}

269 
	$ûock
(
öode
 *
ù
)

271 
buf
 *
bp
;

272 
döode
 *
dù
;

274 if(
ù
 =0 || ip->
ªf
 < 1)

275 
	`∑nic
("ilock");

277 
	`acquúe
(&
iˇche
.
lock
);

278 
ù
->
Êags
 & 
I_BUSY
)

279 
	`¶ìp
(
ù
, &
iˇche
.
lock
);

280 
ù
->
Êags
 |
I_BUSY
;

281 
	`ªÀa£
(&
iˇche
.
lock
);

283 if(!(
ù
->
Êags
 & 
I_VALID
)){

284 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

285 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

286 
ù
->
ty≥
 = 
dù
->type;

287 
ù
->
maj‹
 = 
dù
->major;

288 
ù
->
mö‹
 = 
dù
->minor;

289 
ù
->
∆ök
 = 
dù
->nlink;

290 
ù
->
size
 = 
dù
->size;

291 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

292 
	`bªl£
(
bp
);

293 
ù
->
Êags
 |
I_VALID
;

294 if(
ù
->
ty≥
 == 0)

295 
	`∑nic
("ilock:ÇoÅype");

297 
	}
}

301 
	$iu∆ock
(
öode
 *
ù
)

303 if(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

304 
	`∑nic
("iunlock");

306 
	`acquúe
(&
iˇche
.
lock
);

307 
ù
->
Êags
 &~
I_BUSY
;

308 
	`wakeup
(
ù
);

309 
	`ªÀa£
(&
iˇche
.
lock
);

310 
	}
}

320 
	$ùut
(
öode
 *
ù
)

322 
	`acquúe
(&
iˇche
.
lock
);

323 if(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

325 if(
ù
->
Êags
 & 
I_BUSY
)

326 
	`∑nic
("iput busy");

327 
ù
->
Êags
 |
I_BUSY
;

328 
	`ªÀa£
(&
iˇche
.
lock
);

329 
	`ôrunc
(
ù
);

330 
ù
->
ty≥
 = 0;

331 
	`iupd©e
(
ù
);

332 
	`acquúe
(&
iˇche
.
lock
);

333 
ù
->
Êags
 = 0;

334 
	`wakeup
(
ù
);

336 
ù
->
ªf
--;

337 
	`ªÀa£
(&
iˇche
.
lock
);

338 
	}
}

342 
	$iu∆ockput
(
öode
 *
ù
)

344 
	`iu∆ock
(
ù
);

345 
	`ùut
(
ù
);

346 
	}
}

358 
uöt


359 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
)

361 
uöt
 
addr
, *
a
;

362 
buf
 *
bp
;

364 if(
bn
 < 
NDIRECT
){

365 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

366 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

367  
addr
;

369 
bn
 -
NDIRECT
;

371 if(
bn
 < 
NINDIRECT
){

373 if((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

374 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

375 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

376 
a
 = (
uöt
*)
bp
->
d©a
;

377 if((
addr
 = 
a
[
bn
]) == 0){

378 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

379 
	`log_wrôe
(
bp
);

381 
	`bªl£
(
bp
);

382  
addr
;

385 
	`∑nic
("bmap: out ofÑange");

386 
	}
}

394 
	$ôrunc
(
öode
 *
ù
)

396 
i
, 
j
;

397 
buf
 *
bp
;

398 
uöt
 *
a
;

400 
i
 = 0; i < 
NDIRECT
; i++){

401 if(
ù
->
addrs
[
i
]){

402 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

403 
ù
->
addrs
[
i
] = 0;

407 if(
ù
->
addrs
[
NDIRECT
]){

408 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

409 
a
 = (
uöt
*)
bp
->
d©a
;

410 
j
 = 0; j < 
NINDIRECT
; j++){

411 if(
a
[
j
])

412 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

414 
	`bªl£
(
bp
);

415 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

416 
ù
->
addrs
[
NDIRECT
] = 0;

419 
ù
->
size
 = 0;

420 
	`iupd©e
(
ù
);

421 
	}
}

425 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

427 
°
->
dev
 = 
ù
->dev;

428 
°
->
öo
 = 
ù
->
öum
;

429 
°
->
ty≥
 = 
ù
->type;

430 
°
->
∆ök
 = 
ù
->nlink;

431 
°
->
size
 = 
ù
->size;

432 
	}
}

437 
	$ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

439 
uöt
 
tŸ
, 
m
;

440 
buf
 *
bp
;

442 if(
ù
->
ty≥
 =
T_DEV
){

443 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

445  
devsw
[
ù
->
maj‹
].
	`ªad
(ù, 
d°
, 
n
);

448 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

450 if(
off
 + 
n
 > 
ù
->
size
)

451 
n
 = 
ù
->
size
 - 
off
;

453 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

454 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

455 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

456 
	`memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

457 
	`bªl£
(
bp
);

459  
n
;

460 
	}
}

465 
	$wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

467 
uöt
 
tŸ
, 
m
;

468 
buf
 *
bp
;

470 if(
ù
->
ty≥
 =
T_DEV
){

471 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

473  
devsw
[
ù
->
maj‹
].
	`wrôe
(ù, 
§c
, 
n
);

476 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

478 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

481 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

482 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

483 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

484 
	`memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

485 
	`log_wrôe
(
bp
);

486 
	`bªl£
(
bp
);

489 if(
n
 > 0 && 
off
 > 
ù
->
size
){

490 
ù
->
size
 = 
off
;

491 
	`iupd©e
(
ù
);

493  
n
;

494 
	}
}

500 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

502  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

503 
	}
}

507 
öode
*

508 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

510 
uöt
 
off
, 
öum
;

511 
dúít
 
de
;

513 if(
dp
->
ty≥
 !
T_DIR
)

514 
	`∑nic
("dirlookupÇot DIR");

516 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

517 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

518 
	`∑nic
("dirlinkÑead");

519 if(
de
.
öum
 == 0)

521 if(
	`«mecmp
(
«me
, 
de
.name) == 0){

523 if(
poff
)

524 *
poff
 = 
off
;

525 
öum
 = 
de
.inum;

526  
	`igë
(
dp
->
dev
, 
öum
);

531 
	}
}

535 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

537 
off
;

538 
dúít
 
de
;

539 
öode
 *
ù
;

542 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

543 
	`ùut
(
ù
);

548 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

549 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

550 
	`∑nic
("dirlinkÑead");

551 if(
de
.
öum
 == 0)

555 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

556 
de
.
öum
 = inum;

557 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

558 
	`∑nic
("dirlink");

561 
	}
}

579 
	$skùñem
(*
∑th
, *
«me
)

581 *
s
;

582 
Àn
;

584 *
∑th
 == '/')

585 
∑th
++;

586 if(*
∑th
 == 0)

588 
s
 = 
∑th
;

589 *
∑th
 != '/' && *path != 0)

590 
∑th
++;

591 
Àn
 = 
∑th
 - 
s
;

592 if(
Àn
 >
DIRSIZ
)

593 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

595 
	`memmove
(
«me
, 
s
, 
Àn
);

596 
«me
[
Àn
] = 0;

598 *
∑th
 == '/')

599 
∑th
++;

600  
∑th
;

601 
	}
}

607 
öode
*

608 
	$«mex
(*
∑th
, 
«meù¨ít
, *
«me
)

610 
öode
 *
ù
, *
√xt
;

612 if(*
∑th
 == '/')

613 
ù
 = 
	`igë
(
ROOTDEV
, 
ROOTINO
);

615 
ù
 = 
	`idup
(
¥oc
->
cwd
);

617 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

618 
	`ûock
(
ù
);

619 if(
ù
->
ty≥
 !
T_DIR
){

620 
	`iu∆ockput
(
ù
);

623 if(
«meù¨ít
 && *
∑th
 == '\0'){

625 
	`iu∆ock
(
ù
);

626  
ù
;

628 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

629 
	`iu∆ockput
(
ù
);

632 
	`iu∆ockput
(
ù
);

633 
ù
 = 
√xt
;

635 if(
«meù¨ít
){

636 
	`ùut
(
ù
);

639  
ù
;

640 
	}
}

642 
öode
*

643 
	$«mei
(*
∑th
)

645 
«me
[
DIRSIZ
];

646  
	`«mex
(
∑th
, 0, 
«me
);

647 
	}
}

649 
öode
*

650 
	$«meù¨ít
(*
∑th
, *
«me
)

652  
	`«mex
(
∑th
, 1, 
«me
);

653 
	}
}

	@fs.h

11 
	#ROOTINO
 1

12 
	#BSIZE
 512

13 

	)

15 
	ssu≥rblock
 {

16 
uöt
 
	msize
;

17 
uöt
 
	mnblocks
;

18 
uöt
 
	mnöodes
;

19 
uöt
 
	m∆og
;

22 
	#NDIRECT
 12

	)

23 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

24 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

27 
	sdöode
 {

28 
	mty≥
;

29 
	mmaj‹
;

30 
	mmö‹
;

31 
	m∆ök
;

32 
uöt
 
	msize
;

33 
uöt
 
	maddrs
[
NDIRECT
+1];

37 
	#IPB
 (
BSIZE
 / (
döode
))

	)

40 
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

43 
	#BPB
 (
BSIZE
*8)

	)

46 
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

49 
	#DIRSIZ
 14

	)

51 
	sdúít
 {

52 
ush‹t
 
	möum
;

53 
	m«me
[
DIRSIZ
];

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m)) > 0){

18 
m
 +
n
;

19 
p
 = 
buf
;

20 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

21 *
q
 = 0;

22 if(
	`m©ch
(
∑âîn
, 
p
)){

23 *
q
 = '\n';

24 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

26 
p
 = 
q
+1;

28 if(
p
 =
buf
)

29 
m
 = 0;

30 if(
m
 > 0){

31 
m
 -
p
 - 
buf
;

32 
	`memmove
(
buf
, 
p
, 
m
);

35 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
fd
, 
i
;

41 *
∑âîn
;

43 if(
¨gc
 <= 1){

44 
	`¥ötf
(2, "usage: grepÖattern [file ...]\n");

45 
	`exô
();

47 
∑âîn
 = 
¨gv
[1];

49 if(
¨gc
 <= 2){

50 
	`gªp
(
∑âîn
, 0);

51 
	`exô
();

54 
i
 = 2; i < 
¨gc
; i++){

55 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

56 
	`¥ötf
(1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

57 
	`exô
();

59 
	`gªp
(
∑âîn
, 
fd
);

60 
	`˛o£
(
fd
);

62 
	`exô
();

63 
	}
}

68 
m©chhîe
(*, *);

69 
m©ch°¨
(, *, *);

72 
	$m©ch
(*
ª
, *
ãxt
)

74 if(
ª
[0] == '^')

75  
	`m©chhîe
(
ª
+1, 
ãxt
);

77 if(
	`m©chhîe
(
ª
, 
ãxt
))

79 }*
ãxt
++ != '\0');

81 
	}
}

84 
	$m©chhîe
(*
ª
, *
ãxt
)

86 if(
ª
[0] == '\0')

88 if(
ª
[1] == '*')

89  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

90 if(
ª
[0] == '$' &&Ñe[1] == '\0')

91  *
ãxt
 == '\0';

92 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

93  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

95 
	}
}

98 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

101 if(
	`m©chhîe
(
ª
, 
ãxt
))

103 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

105 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
	#IDE_BSY
 0x80

	)

15 
	#IDE_DRDY
 0x40

	)

16 
	#IDE_DF
 0x20

	)

17 
	#IDE_ERR
 0x01

	)

19 
	#IDE_CMD_READ
 0x20

	)

20 
	#IDE_CMD_WRITE
 0x30

	)

26 
•ölock
 
	gidñock
;

27 
buf
 *
	gidequeue
;

29 
	ghavedisk1
;

30 
ide°¨t
(
buf
*);

34 
	$idewaô
(
checkîr
)

36 
r
;

38 ((
r
 = 
	`öb
(0x1f7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

40 if(
checkîr
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

43 
	}
}

46 
	$ideöô
()

48 
i
;

50 
	`öôlock
(&
idñock
, "ide");

51 
	`pi˚«bÀ
(
IRQ_IDE
);

52 
	`iﬂpi˚«bÀ
(
IRQ_IDE
, 
n˝u
 - 1);

53 
	`idewaô
(0);

56 
	`outb
(0x1f6, 0xe0 | (1<<4));

57 
i
=0; i<1000; i++){

58 if(
	`öb
(0x1f7) != 0){

59 
havedisk1
 = 1;

65 
	`outb
(0x1f6, 0xe0 | (0<<4));

66 
	}
}

70 
	$ide°¨t
(
buf
 *
b
)

72 if(
b
 == 0)

73 
	`∑nic
("idestart");

75 
	`idewaô
(0);

76 
	`outb
(0x3f6, 0);

77 
	`outb
(0x1f2, 1);

78 
	`outb
(0x1f3, 
b
->
£˘‹
 & 0xff);

79 
	`outb
(0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

80 
	`outb
(0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

81 
	`outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((b->
£˘‹
>>24)&0x0f));

82 if(
b
->
Êags
 & 
B_DIRTY
){

83 
	`outb
(0x1f7, 
IDE_CMD_WRITE
);

84 
	`out¶
(0x1f0, 
b
->
d©a
, 512/4);

86 
	`outb
(0x1f7, 
IDE_CMD_READ
);

88 
	}
}

92 
	$ideöå
()

94 
buf
 *
b
;

97 
	`acquúe
(&
idñock
);

98 if((
b
 = 
idequeue
) == 0){

99 
	`ªÀa£
(&
idñock
);

103 
idequeue
 = 
b
->
q√xt
;

106 if(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`idewaô
(1) >= 0)

107 
	`ö¶
(0x1f0, 
b
->
d©a
, 512/4);

110 
b
->
Êags
 |
B_VALID
;

111 
b
->
Êags
 &~
B_DIRTY
;

112 
	`wakeup
(
b
);

115 if(
idequeue
 != 0)

116 
	`ide°¨t
(
idequeue
);

118 
	`ªÀa£
(&
idñock
);

119 
	}
}

126 
	$idîw
(
buf
 *
b
)

128 
buf
 **
µ
;

130 if(!(
b
->
Êags
 & 
B_BUSY
))

131 
	`∑nic
("iderw: bufÇot busy");

132 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

133 
	`∑nic
("iderw:ÇothingÅo do");

134 if(
b
->
dev
 !0 && !
havedisk1
)

135 
	`∑nic
("iderw: ide disk 1ÇotÖresent");

137 
	`acquúe
(&
idñock
);

140 
b
->
q√xt
 = 0;

141 
µ
=&
idequeue
; *µ;Öp=&(*µ)->
q√xt
)

143 *
µ
 = 
b
;

146 if(
idequeue
 =
b
)

147 
	`ide°¨t
(
b
);

150 (
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) != B_VALID){

151 
	`¶ìp
(
b
, &
idñock
);

154 
	`ªÀa£
(&
idñock
);

155 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
(1, "init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
(1, "init: fork failed\n");

27 
	`exô
();

29 if(
pid
 == 0){

30 
	`exec
("sh", 
¨gv
);

31 
	`¥ötf
(1, "init:Éxec sh failed\n");

32 
	`exô
();

34 (
wpid
=
	`waô
()Ë>0 && wpid !
pid
)

35 
	`¥ötf
(1, "zombie!\n");

37 
	}
}

	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic
 {

29 
uöt
 
	mªg
;

30 
uöt
 
	m∑d
[3];

31 
uöt
 
	md©a
;

34 
uöt


35 
	$iﬂpi¸ód
(
ªg
)

37 
iﬂpic
->
ªg
 =Ñeg;

38  
iﬂpic
->
d©a
;

39 
	}
}

42 
	$iﬂpicwrôe
(
ªg
, 
uöt
 
d©a
)

44 
iﬂpic
->
ªg
 =Ñeg;

45 
iﬂpic
->
d©a
 = data;

46 
	}
}

49 
	$iﬂpicöô
()

51 
i
, 
id
, 
maxöå
;

53 if(!
ismp
)

56 
iﬂpic
 = (vﬁ©ûêiﬂpic*)
IOAPIC
;

57 
maxöå
 = (
	`iﬂpi¸ód
(
REG_VER
) >> 16) & 0xFF;

58 
id
 = 
	`iﬂpi¸ód
(
REG_ID
) >> 24;

59 if(
id
 !
iﬂpicid
)

60 
	`˝rötf
("ioapicinit: id isn'tÉqualÅo ioapicid;Çotá MP\n");

64 
i
 = 0; i <
maxöå
; i++){

65 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
T_IRQ0
 + i));

66 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
+1, 0);

68 
	}
}

71 
	$iﬂpi˚«bÀ
(
úq
, 
˝unum
)

73 if(!
ismp
)

79 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
, 
T_IRQ0
 + irq);

80 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

81 
	}
}

	@kalloc.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
‰ìønge
(*
v°¨t
, *
víd
);

13 
íd
[];

15 
	srun
 {

16 
run
 *
	m√xt
;

20 
•ölock
 
	mlock
;

21 
	mu£_lock
;

22 
run
 *
	m‰ìli°
;

23 } 
	gkmem
;

31 
	$köô1
(*
v°¨t
, *
víd
)

33 
	`öôlock
(&
kmem
.
lock
, "kmem");

34 
kmem
.
u£_lock
 = 0;

35 
	`‰ìønge
(
v°¨t
, 
víd
);

36 
	}
}

39 
	$köô2
(*
v°¨t
, *
víd
)

41 
	`‰ìønge
(
v°¨t
, 
víd
);

42 
kmem
.
u£_lock
 = 1;

43 
	}
}

46 
	$‰ìønge
(*
v°¨t
, *
víd
)

48 *
p
;

49 
p
 = (*)
	`PGROUNDUP
((
uöt
)
v°¨t
);

50 ; 
p
 + 
PGSIZE
 <(*)
víd
;Ö += PGSIZE)

51 
	`k‰ì
(
p
);

52 
	}
}

60 
	$k‰ì
(*
v
)

62 
run
 *
r
;

64 if((
uöt
)
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
(vË>
PHYSTOP
)

65 
	`∑nic
("kfree");

68 
	`mem£t
(
v
, 1, 
PGSIZE
);

70 if(
kmem
.
u£_lock
)

71 
	`acquúe
(&
kmem
.
lock
);

72 
r
 = (
run
*)
v
;

73 
r
->
√xt
 = 
kmem
.
‰ìli°
;

74 
kmem
.
‰ìli°
 = 
r
;

75 if(
kmem
.
u£_lock
)

76 
	`ªÀa£
(&
kmem
.
lock
);

77 
	}
}

83 
	$kÆloc
()

85 
run
 *
r
;

87 if(
kmem
.
u£_lock
)

88 
	`acquúe
(&
kmem
.
lock
);

89 
r
 = 
kmem
.
‰ìli°
;

90 if(
r
)

91 
kmem
.
‰ìli°
 = 
r
->
√xt
;

92 if(
kmem
.
u£_lock
)

93 
	`ªÀa£
(&
kmem
.
lock
);

94  (*)
r
;

95 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbdgëc
()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
(
KBSTATP
);

16 if((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
(
KBDATAP
);

20 if(
d©a
 == 0xE0){

21 
shi·
 |
E0ESC
;

23 } if(
d©a
 & 0x80){

25 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

26 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 } if(
shi·
 & 
E0ESC
){

30 
d©a
 |= 0x80;

31 
shi·
 &~
E0ESC
;

34 
shi·
 |
shi·code
[
d©a
];

35 
shi·
 ^
toggÀcode
[
d©a
];

36 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 if(
shi·
 & 
CAPSLOCK
){

38 if('a' <
c
 && c <= 'z')

39 
c
 += 'A' - 'a';

40 if('A' <
c
 && c <= 'Z')

41 
c
 += 'a' - 'A';

43  
c
;

44 
	}
}

47 
	$kbdöå
()

49 
	`c⁄sﬁeöå
(
kbdgëc
);

50 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] =

36 [0x1D] 
CTL
,

37 [0x2A] 
SHIFT
,

38 [0x36] 
SHIFT
,

39 [0x38] 
ALT
,

40 [0x9D] 
CTL
,

41 [0xB8] 
ALT


44 
uch¨
 
	gtoggÀcode
[256] =

46 [0x3A] 
CAPSLOCK
,

47 [0x45] 
NUMLOCK
,

48 [0x46] 
SCROLLLOCK


51 
uch¨
 
	gn‹mÆm≠
[256] =

53 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 
uch¨
 
	gshi·m≠
[256] =

75 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


95 
uch¨
 
	g˘lm≠
[256] =

97 
NO
, NO, NO, NO, NO, NO, NO, NO,

98 
NO
, NO, NO, NO, NO, NO, NO, NO,

99 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

100 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

101 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

102 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

103 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

105 [0xB5] 
C
('/'),

106 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

107 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

108 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

109 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

110 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 1){

11 
	`¥ötf
(2, "usage: killÖid...\n");

12 
	`exô
();

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
();

17 
	}
}

	@kthread.c

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"memœyout.h
"

7 
	~"å≠s.h
"

8 
	~"mmu.h
"

9 
	~"x86.h
"

12 
	#ID
 (0x0020/4)

13 
	#VER
 (0x0030/4)

14 
	#TPR
 (0x0080/4)

15 
	#EOI
 (0x00B0/4)

16 
	#SVR
 (0x00F0/4)

17 
	#ENABLE
 0x00000100

18 
	#ESR
 (0x0280/4)

19 
	#ICRLO
 (0x0300/4)

20 
	#INIT
 0x00000500

21 
	#STARTUP
 0x00000600

22 
	#DELIVS
 0x00001000

23 
	#ASSERT
 0x00004000

24 
	#DEASSERT
 0x00000000

	)

25 
	#LEVEL
 0x00008000

26 
	#BCAST
 0x00080000

27 
	#BUSY
 0x00001000

	)

28 
	#FIXED
 0x00000000

	)

29 
	#ICRHI
 (0x0310/4)

30 
	#TIMER
 (0x0320/4)

31 
	#X1
 0x0000000B

32 
	#PERIODIC
 0x00020000

33 
	#PCINT
 (0x0340/4)

34 
	#LINT0
 (0x0350/4)

35 
	#LINT1
 (0x0360/4)

36 
	#ERROR
 (0x0370/4)

37 
	#MASKED
 0x00010000

38 
	#TICR
 (0x0380/4)

39 
	#TCCR
 (0x0390/4)

40 
	#TDCR
 (0x03E0/4)

41 

	)

42 vﬁ©ûê
uöt
 *
	gœpic
;

45 
	$œpicw
(
ödex
, 
vÆue
)

47 
œpic
[
ödex
] = 
vÆue
;

48 
œpic
[
ID
];

49 
	}
}

53 
	$œpicöô
()

55 if(!
œpic
)

59 
	`œpicw
(
SVR
, 
ENABLE
 | (
T_IRQ0
 + 
IRQ_SPURIOUS
));

65 
	`œpicw
(
TDCR
, 
X1
);

66 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
T_IRQ0
 + 
IRQ_TIMER
));

67 
	`œpicw
(
TICR
, 10000000);

70 
	`œpicw
(
LINT0
, 
MASKED
);

71 
	`œpicw
(
LINT1
, 
MASKED
);

75 if(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

76 
	`œpicw
(
PCINT
, 
MASKED
);

79 
	`œpicw
(
ERROR
, 
T_IRQ0
 + 
IRQ_ERROR
);

82 
	`œpicw
(
ESR
, 0);

83 
	`œpicw
(
ESR
, 0);

86 
	`œpicw
(
EOI
, 0);

89 
	`œpicw
(
ICRHI
, 0);

90 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

91 
œpic
[
ICRLO
] & 
DELIVS
)

95 
	`œpicw
(
TPR
, 0);

96 
	}
}

99 
	$˝unum
()

106 if(
	`ªadeÊags
()&
FL_IF
){

107 
n
;

108 if(
n
++ == 0)

109 
	`˝rötf
("cpu called from %x with interruptsÉnabled\n",

110 
	`__buûtö_ªtu∫_addªss
(0));

113 if(
œpic
)

114  
œpic
[
ID
]>>24;

116 
	}
}

120 
	$œpi˚oi
()

122 if(
œpic
)

123 
	`œpicw
(
EOI
, 0);

124 
	}
}

129 
	$mi¸odñay
(
us
)

131 
	}
}

133 
	#IO_RTC
 0x70

	)

138 
	$œpic°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

140 
i
;

141 
ush‹t
 *
wrv
;

146 
	`outb
(
IO_RTC
, 0xF);

147 
	`outb
(
IO_RTC
+1, 0x0A);

148 
wrv
 = (
ush‹t
*)
	`P2V
((0x40<<4 | 0x67));

149 
wrv
[0] = 0;

150 
wrv
[1] = 
addr
 >> 4;

154 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

155 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

156 
	`mi¸odñay
(200);

157 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

158 
	`mi¸odñay
(100);

165 
i
 = 0; i < 2; i++){

166 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

167 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

168 
	`mi¸odñay
(200);

170 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`¥ötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
();

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`¥ötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
();

15 
	}
}

	@log.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"•ölock.h
"

5 
	~"fs.h
"

6 
	~"buf.h
"

33 
	sloghódî
 {

34 
	mn
;

35 
	m£˘‹
[
LOGSIZE
];

38 
	slog
 {

39 
•ölock
 
	mlock
;

40 
	m°¨t
;

41 
	msize
;

42 
	mout°™dög
;

43 
	mcommôtög
;

44 
	mdev
;

45 
loghódî
 
	mlh
;

47 
log
 
	glog
;

49 
ªcovî_‰om_log
();

50 
commô
();

53 
	$öôlog
()

55 i‡((
loghódî
Ë>
BSIZE
)

56 
	`∑nic
("initlog:Åoo bigÜogheader");

58 
su≥rblock
 
sb
;

59 
	`öôlock
(&
log
.
lock
, "log");

60 
	`ªadsb
(
ROOTDEV
, &
sb
);

61 
log
.
°¨t
 = 
sb
.
size
 - sb.
∆og
;

62 
log
.
size
 = 
sb
.
∆og
;

63 
log
.
dev
 = 
ROOTDEV
;

64 
	`ªcovî_‰om_log
();

65 
	}
}

69 
	$ö°Æl_å™s
()

71 
èû
;

73 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

74 
buf
 *
lbuf
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

75 
buf
 *
dbuf
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
£˘‹
[
èû
]);

76 
	`memmove
(
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

77 
	`bwrôe
(
dbuf
);

78 
	`bªl£
(
lbuf
);

79 
	`bªl£
(
dbuf
);

81 
	}
}

85 
	$ªad_hód
()

87 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

88 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

89 
i
;

90 
log
.
lh
.
n
 =Üh->n;

91 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

92 
log
.
lh
.
£˘‹
[
i
] =Üh->sector[i];

94 
	`bªl£
(
buf
);

95 
	}
}

101 
	$wrôe_hód
()

103 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

104 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

105 
i
;

106 
hb
->
n
 = 
log
.
lh
.n;

107 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

108 
hb
->
£˘‹
[
i
] = 
log
.
lh
.sector[i];

110 
	`bwrôe
(
buf
);

111 
	`bªl£
(
buf
);

112 
	}
}

115 
	$ªcovî_‰om_log
()

117 
	`ªad_hód
();

118 
	`ö°Æl_å™s
();

119 
log
.
lh
.
n
 = 0;

120 
	`wrôe_hód
();

121 
	}
}

125 
	$begö_›
()

127 
	`acquúe
(&
log
.
lock
);

129 if(
log
.
commôtög
){

130 
	`¶ìp
(&
log
, &log.
lock
);

131 } if(
log
.
lh
.
n
 + (log.
out°™dög
+1)*
MAXOPBLOCKS
 > 
LOGSIZE
){

133 
	`¶ìp
(&
log
, &log.
lock
);

135 
log
.
out°™dög
 += 1;

136 
	`ªÀa£
(&
log
.
lock
);

140 
	}
}

145 
	$íd_›
()

147 
do_commô
 = 0;

149 
	`acquúe
(&
log
.
lock
);

150 
log
.
out°™dög
 -= 1;

151 if(
log
.
commôtög
)

152 
	`∑nic
("log.committing");

153 if(
log
.
out°™dög
 == 0){

154 
do_commô
 = 1;

155 
log
.
commôtög
 = 1;

158 
	`wakeup
(&
log
);

160 
	`ªÀa£
(&
log
.
lock
);

162 if(
do_commô
){

165 
	`commô
();

166 
	`acquúe
(&
log
.
lock
);

167 
log
.
commôtög
 = 0;

168 
	`wakeup
(&
log
);

169 
	`ªÀa£
(&
log
.
lock
);

171 
	}
}

175 
	$wrôe_log
()

177 
èû
;

179 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

180 
buf
 *
to
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

181 
buf
 *
‰om
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
£˘‹
[
èû
]);

182 
	`memmove
(
to
->
d©a
, 
‰om
->d©a, 
BSIZE
);

183 
	`bwrôe
(
to
);

184 
	`bªl£
(
‰om
);

185 
	`bªl£
(
to
);

187 
	}
}

190 
	$commô
()

192 i‡(
log
.
lh
.
n
 > 0) {

193 
	`wrôe_log
();

194 
	`wrôe_hód
();

195 
	`ö°Æl_å™s
();

196 
log
.
lh
.
n
 = 0;

197 
	`wrôe_hód
();

199 
	}
}

211 
	$log_wrôe
(
buf
 *
b
)

213 
i
;

215 i‡(
log
.
lh
.
n
 >
LOGSIZE
 ||Üog.lh.¿>log.
size
 - 1)

216 
	`∑nic
("too bigáÅransaction");

217 i‡(
log
.
out°™dög
 < 1)

218 
	`∑nic
("log_write outside ofÅrans");

220 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

221 i‡(
log
.
lh
.
£˘‹
[
i
] =
b
->sector)

224 
log
.
lh
.
£˘‹
[
i
] = 
b
->sector;

225 i‡(
i
 =
log
.
lh
.
n
)

226 
log
.
lh
.
n
++;

227 
b
->
Êags
 |
B_DIRTY
;

228 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`¥ötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`¥ötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
(1, "ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
(1, "ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

78 if(
¨gc
 < 2){

79 
	`ls
(".");

80 
	`exô
();

82 
i
=1; i<
¨gc
; i++)

83 
	`ls
(
¨gv
[
i
]);

84 
	`exô
();

85 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

9 
°¨tŸhîs
();

10 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
pde_t
 *
kpgdú
;

12 
íd
[];

18 
	$maö
()

20 
	`köô1
(
íd
, 
	`P2V
(4*1024*1024));

21 
	`kvmÆloc
();

22 
	`mpöô
();

23 
	`œpicöô
();

24 
	`£göô
();

25 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
˝u
->
id
);

26 
	`picöô
();

27 
	`iﬂpicöô
();

28 
	`c⁄sﬁeöô
();

29 
	`u¨töô
();

30 
	`pöô
();

31 
	`tvöô
();

32 
	`böô
();

33 
	`fûeöô
();

34 
	`iöô
();

35 
	`ideöô
();

36 if(!
ismp
)

37 
	`timîöô
();

38 
	`°¨tŸhîs
();

39 
	`köô2
(
	`P2V
(4*1024*1024), P2V(
PHYSTOP
));

40 
	`u£röô
();

42 
	`mpmaö
();

43 
	}
}

47 
	$m≥¡î
()

49 
	`swôchkvm
();

50 
	`£göô
();

51 
	`œpicöô
();

52 
	`mpmaö
();

53 
	}
}

57 
	$mpmaö
()

59 
	`˝rötf
("˝u%d: sèπög\n", 
˝u
->
id
);

60 
	`idtöô
();

61 
	`xchg
(&
˝u
->
°¨ãd
, 1);

62 
	`scheduÀr
();

63 
	}
}

65 
pde_t
 
	gíåypgdú
[];

69 
	$°¨tŸhîs
()

71 
uch¨
 
_bö¨y_íåyŸhî_°¨t
[], 
_bö¨y_íåyŸhî_size
[];

72 
uch¨
 *
code
;

73 
˝u
 *
c
;

74 *
°ack
;

79 
code
 = 
	`p2v
(0x7000);

80 
	`memmove
(
code
, 
_bö¨y_íåyŸhî_°¨t
, (
uöt
)
_bö¨y_íåyŸhî_size
);

82 
c
 = 
˝us
; c < cpus+
n˝u
; c++){

83 if(
c
 =
˝us
+
	`˝unum
())

89 
°ack
 = 
	`kÆloc
();

90 *(**)(
code
-4Ë
°ack
 + 
KSTACKSIZE
;

91 *(**)(
code
-8Ë
m≥¡î
;

92 *(**)(
code
-12Ë(*Ë
	`v2p
(
íåypgdú
);

94 
	`œpic°¨èp
(
c
->
id
, 
	`v2p
(
code
));

97 
c
->
°¨ãd
 == 0)

100 
	}
}

106 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

107 
pde_t
 
íåypgdú
[
NPDENTRIES
] = {

109 [0] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

111 [
KERNBASE
>>
PDXSHIFT
] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

112 
	}
};

	@memide.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
uch¨
 
_bö¨y_fs_img_°¨t
[], 
_bö¨y_fs_img_size
[];

16 
	gdisksize
;

17 
uch¨
 *
	gmemdisk
;

20 
	$ideöô
()

22 
memdisk
 = 
_bö¨y_fs_img_°¨t
;

23 
disksize
 = (
uöt
)
_bö¨y_fs_img_size
/512;

24 
	}
}

28 
	$ideöå
()

31 
	}
}

37 
	$idîw
(
buf
 *
b
)

39 
uch¨
 *
p
;

41 if(!(
b
->
Êags
 & 
B_BUSY
))

42 
	`∑nic
("iderw: bufÇot busy");

43 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

44 
	`∑nic
("iderw:ÇothingÅo do");

45 if(
b
->
dev
 != 1)

46 
	`∑nic
("iderw:ÑequestÇot for disk 1");

47 if(
b
->
£˘‹
 >
disksize
)

48 
	`∑nic
("iderw: sector out ofÑange");

50 
p
 = 
memdisk
 + 
b
->
£˘‹
*512;

52 if(
b
->
Êags
 & 
B_DIRTY
){

53 
b
->
Êags
 &~
B_DIRTY
;

54 
	`memmove
(
p
, 
b
->
d©a
, 512);

56 
	`memmove
(
b
->
d©a
, 
p
, 512);

57 
b
->
Êags
 |
B_VALID
;

58 
	}
}

	@memlayout.h

3 
	#EXTMEM
 0x100000

4 
	#PHYSTOP
 0xE000000

5 
	#DEVSPACE
 0xFE000000

6 

	)

8 
	#KERNBASE
 0x80000000

9 
	#KERNLINK
 (
KERNBASE
+
EXTMEM
)

10 

	)

11 #i‚de‡
__ASSEMBLER__


13 
ölöe
 
uöt
 
	$v2p
(*
a
Ë{  ((
uöt
Ë◊)Ë- 
KERNBASE
; 
	}
}

14 
ölöe
 *
	$p2v
(
uöt
 
a
Ë{  (*Ë(◊Ë+ 
KERNBASE
); 
	}
}

18 
	#V2P
(
a
Ë(((
uöt
Ë◊)Ë- 
KERNBASE
)

	)

19 
	#P2V
(
a
Ë(((*Ë◊)Ë+ 
KERNBASE
)

	)

21 
	#V2P_WO
(
x
Ë((xË- 
KERNBASE
)

22 
	#P2V_WO
(
x
Ë((xË+ 
KERNBASE
)

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage: mkdir files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"ty≥s.h
"

	)

10 
	~"fs.h
"

11 
	~"°©.h
"

12 
	~"∑øm.h
"

14 
	#°©ic_as£π
(
a
, 
b
Ëdÿ{ 0Ë0: ◊): ; } 0)

	)

16 
	gnblocks
 = (995-
LOGSIZE
);

17 
	g∆og
 = 
LOGSIZE
;

18 
	gnöodes
 = 200;

19 
	gsize
 = 1024;

21 
	gfsfd
;

22 
su≥rblock
 
	gsb
;

23 
	gzî€s
[512];

24 
uöt
 
	g‰ìblock
;

25 
uöt
 
	gu£dblocks
;

26 
uöt
 
	gbôblocks
;

27 
uöt
 
	g‰ìöode
 = 1;

29 
bÆloc
();

30 
w£˘
(
uöt
, *);

31 
wöode
(
uöt
, 
döode
*);

32 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

33 
r£˘
(
uöt
 
£c
, *
buf
);

34 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

35 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

38 
ush‹t


39 
	$xsh‹t
(
ush‹t
 
x
)

41 
ush‹t
 
y
;

42 
uch¨
 *
a
 = (uch¨*)&
y
;

43 
a
[0] = 
x
;

44 
a
[1] = 
x
 >> 8;

45  
y
;

46 
	}
}

48 
uöt


49 
	$xöt
(
uöt
 
x
)

51 
uöt
 
y
;

52 
uch¨
 *
a
 = (uch¨*)&
y
;

53 
a
[0] = 
x
;

54 
a
[1] = 
x
 >> 8;

55 
a
[2] = 
x
 >> 16;

56 
a
[3] = 
x
 >> 24;

57  
y
;

58 
	}
}

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
i
, 
cc
, 
fd
;

64 
uöt
 
roŸöo
, 
öum
, 
off
;

65 
dúít
 
de
;

66 
buf
[512];

67 
döode
 
dö
;

70 
	`°©ic_as£π
(() == 4, "Integers must be 4 bytes!");

72 if(
¨gc
 < 2){

73 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

74 
	`exô
(1);

77 
	`as£π
((512 % (
döode
)) == 0);

78 
	`as£π
((512 % (
dúít
)) == 0);

80 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

81 if(
fsfd
 < 0){

82 
	`≥º‹
(
¨gv
[1]);

83 
	`exô
(1);

86 
sb
.
size
 = 
	`xöt
(size);

87 
sb
.
nblocks
 = 
	`xöt
(nblocks);

88 
sb
.
nöodes
 = 
	`xöt
(ninodes);

89 
sb
.
∆og
 = 
	`xöt
(nlog);

91 
bôblocks
 = 
size
/(512*8) + 1;

92 
u£dblocks
 = 
nöodes
 / 
IPB
 + 3 + 
bôblocks
;

93 
‰ìblock
 = 
u£dblocks
;

95 
	`¥ötf
("u£d %d (bô %dÇöodê%zuË‰ì %uÜog %uÅŸÆ %d\n", 
u£dblocks
,

96 
bôblocks
, 
nöodes
/
IPB
 + 1, 
‰ìblock
, 
∆og
, 
nblocks
+
u£dblocks
+nlog);

98 
	`as£π
(
nblocks
 + 
u£dblocks
 + 
∆og
 =
size
);

100 
i
 = 0; i < 
nblocks
 + 
u£dblocks
 + 
∆og
; i++)

101 
	`w£˘
(
i
, 
zî€s
);

103 
	`mem£t
(
buf
, 0, (buf));

104 
	`memmove
(
buf
, &
sb
, (sb));

105 
	`w£˘
(1, 
buf
);

107 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

108 
	`as£π
(
roŸöo
 =
ROOTINO
);

110 
	`bzîo
(&
de
, (de));

111 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

112 
	`°r˝y
(
de
.
«me
, ".");

113 
	`üµíd
(
roŸöo
, &
de
, (de));

115 
	`bzîo
(&
de
, (de));

116 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

117 
	`°r˝y
(
de
.
«me
, "..");

118 
	`üµíd
(
roŸöo
, &
de
, (de));

120 
i
 = 2; i < 
¨gc
; i++){

121 
	`as£π
(
	`ödex
(
¨gv
[
i
], '/') == 0);

123 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

124 
	`≥º‹
(
¨gv
[
i
]);

125 
	`exô
(1);

132 if(
¨gv
[
i
][0] == '_')

133 ++
¨gv
[
i
];

135 
öum
 = 
	`üŒoc
(
T_FILE
);

137 
	`bzîo
(&
de
, (de));

138 
de
.
öum
 = 
	`xsh‹t
(inum);

139 
	`°∫˝y
(
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

140 
	`üµíd
(
roŸöo
, &
de
, (de));

142 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

143 
	`üµíd
(
öum
, 
buf
, 
cc
);

145 
	`˛o£
(
fd
);

149 
	`röode
(
roŸöo
, &
dö
);

150 
off
 = 
	`xöt
(
dö
.
size
);

151 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

152 
dö
.
size
 = 
	`xöt
(
off
);

153 
	`wöode
(
roŸöo
, &
dö
);

155 
	`bÆloc
(
u£dblocks
);

157 
	`exô
(0);

158 
	}
}

161 
	$w£˘
(
uöt
 
£c
, *
buf
)

163 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

164 
	`≥º‹
("lseek");

165 
	`exô
(1);

167 if(
	`wrôe
(
fsfd
, 
buf
, 512) != 512){

168 
	`≥º‹
("write");

169 
	`exô
(1);

171 
	}
}

173 
uöt


174 
	$i2b
(
uöt
 
öum
)

176  (
öum
 / 
IPB
) + 2;

177 
	}
}

180 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

182 
buf
[512];

183 
uöt
 
bn
;

184 
döode
 *
dù
;

186 
bn
 = 
	`i2b
(
öum
);

187 
	`r£˘
(
bn
, 
buf
);

188 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

189 *
dù
 = *
ù
;

190 
	`w£˘
(
bn
, 
buf
);

191 
	}
}

194 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

196 
buf
[512];

197 
uöt
 
bn
;

198 
döode
 *
dù
;

200 
bn
 = 
	`i2b
(
öum
);

201 
	`r£˘
(
bn
, 
buf
);

202 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

203 *
ù
 = *
dù
;

204 
	}
}

207 
	$r£˘
(
uöt
 
£c
, *
buf
)

209 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

210 
	`≥º‹
("lseek");

211 
	`exô
(1);

213 if(
	`ªad
(
fsfd
, 
buf
, 512) != 512){

214 
	`≥º‹
("read");

215 
	`exô
(1);

217 
	}
}

219 
uöt


220 
	$üŒoc
(
ush‹t
 
ty≥
)

222 
uöt
 
öum
 = 
‰ìöode
++;

223 
döode
 
dö
;

225 
	`bzîo
(&
dö
, (din));

226 
dö
.
ty≥
 = 
	`xsh‹t
(type);

227 
dö
.
∆ök
 = 
	`xsh‹t
(1);

228 
dö
.
size
 = 
	`xöt
(0);

229 
	`wöode
(
öum
, &
dö
);

230  
öum
;

231 
	}
}

234 
	$bÆloc
(
u£d
)

236 
uch¨
 
buf
[512];

237 
i
;

239 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

240 
	`as£π
(
u£d
 < 512*8);

241 
	`bzîo
(
buf
, 512);

242 
i
 = 0; i < 
u£d
; i++){

243 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

245 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %zu\n", 
nöodes
/
IPB
 + 3);

246 
	`w£˘
(
nöodes
 / 
IPB
 + 3, 
buf
);

247 
	}
}

249 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

252 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

254 *
p
 = (*)
xp
;

255 
uöt
 
fbn
, 
off
, 
n1
;

256 
döode
 
dö
;

257 
buf
[512];

258 
uöt
 
ödúe˘
[
NINDIRECT
];

259 
uöt
 
x
;

261 
	`röode
(
öum
, &
dö
);

263 
off
 = 
	`xöt
(
dö
.
size
);

264 
n
 > 0){

265 
fbn
 = 
off
 / 512;

266 
	`as£π
(
fbn
 < 
MAXFILE
);

267 if(
fbn
 < 
NDIRECT
){

268 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0){

269 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

270 
u£dblocks
++;

272 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

274 if(
	`xöt
(
dö
.
addrs
[
NDIRECT
]) == 0){

276 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

277 
u£dblocks
++;

280 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

281 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0){

282 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

283 
u£dblocks
++;

284 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

286 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

288 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 512 - 
off
);

289 
	`r£˘
(
x
, 
buf
);

290 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 512), 
n1
);

291 
	`w£˘
(
x
, 
buf
);

292 
n
 -
n1
;

293 
off
 +
n1
;

294 
p
 +
n1
;

296 
dö
.
size
 = 
	`xöt
(
off
);

297 
	`wöode
(
öum
, &
dö
);

298 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#CR0_PE
 0x00000001

29 
	#CR0_MP
 0x00000002

30 
	#CR0_EM
 0x00000004

31 
	#CR0_TS
 0x00000008

32 
	#CR0_ET
 0x00000010

33 
	#CR0_NE
 0x00000020

34 
	#CR0_WP
 0x00010000

35 
	#CR0_AM
 0x00040000

36 
	#CR0_NW
 0x20000000

37 
	#CR0_CD
 0x40000000

38 
	#CR0_PG
 0x80000000

39 

	)

40 
	#CR4_PSE
 0x00000010

41 

	)

42 
	#SEG_KCODE
 1

43 
	#SEG_KDATA
 2

44 
	#SEG_KCPU
 3

45 
	#SEG_UCODE
 4

46 
	#SEG_UDATA
 5

47 
	#SEG_TSS
 6

48 

	)

50 #i‚de‡
__ASSEMBLER__


52 
	s£gdesc
 {

53 
uöt
 
	mlim_15_0
 : 16;

54 
uöt
 
	mba£_15_0
 : 16;

55 
uöt
 
	mba£_23_16
 : 8;

56 
uöt
 
	mty≥
 : 4;

57 
uöt
 
	ms
 : 1;

58 
uöt
 
	md∂
 : 2;

59 
uöt
 
	mp
 : 1;

60 
uöt
 
	mlim_19_16
 : 4;

61 
uöt
 
	mavl
 : 1;

62 
uöt
 
	mrsv1
 : 1;

63 
uöt
 
	mdb
 : 1;

64 
uöt
 
	mg
 : 1;

65 
uöt
 
	mba£_31_24
 : 8;

69 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

70 { ((
lim
Ë>> 12Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

71 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

72 (
uöt
)(
lim
Ë>> 28, 0, 0, 1, 1, (uöt)(
ba£
Ë>> 24 }

	)

73 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

74 { (
lim
Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

75 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

76 (
uöt
)(
lim
Ë>> 16, 0, 0, 1, 0, (uöt)(
ba£
Ë>> 24 }

	)

79 
	#DPL_USER
 0x3

80 

	)

82 
	#STA_X
 0x8

83 
	#STA_E
 0x4

84 
	#STA_C
 0x4

85 
	#STA_W
 0x2

86 
	#STA_R
 0x2

87 
	#STA_A
 0x1

88 

	)

90 
	#STS_T16A
 0x1

91 
	#STS_LDT
 0x2

92 
	#STS_T16B
 0x3

93 
	#STS_CG16
 0x4

94 
	#STS_TG
 0x5

95 
	#STS_IG16
 0x6

96 
	#STS_TG16
 0x7

97 
	#STS_T32A
 0x9

98 
	#STS_T32B
 0xB

99 
	#STS_CG32
 0xC

100 
	#STS_IG32
 0xE

101 
	#STS_TG32
 0xF

102 

	)

112 
	#PDX
(
va
Ë(((
uöt
)(vaË>> 
PDXSHIFT
Ë& 0x3FF)

	)

115 
	#PTX
(
va
Ë(((
uöt
)(vaË>> 
PTXSHIFT
Ë& 0x3FF)

	)

118 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöt
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

121 
	#NPDENTRIES
 1024

122 
	#NPTENTRIES
 1024

123 
	#PGSIZE
 4096

124 

	)

125 
	#PGSHIFT
 12

126 
	#PTXSHIFT
 12

127 
	#PDXSHIFT
 22

128 

	)

129 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

130 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

133 
	#PTE_P
 0x001

134 
	#PTE_W
 0x002

135 
	#PTE_U
 0x004

136 
	#PTE_PWT
 0x008

137 
	#PTE_PCD
 0x010

138 
	#PTE_A
 0x020

139 
	#PTE_D
 0x040

140 
	#PTE_PS
 0x080

141 
	#PTE_MBZ
 0x180

142 

	)

144 
	#PTE_ADDR
(
±e
Ë((
uöt
)’ãË& ~0xFFF)

	)

145 
	#PTE_FLAGS
(
±e
Ë((
uöt
)’ãË& 0xFFF)

	)

147 #i‚de‡
__ASSEMBLER__


148 
uöt
 
	t±e_t
;

151 
	sèsk°©e
 {

152 
uöt
 
	mlök
;

153 
uöt
 
	me•0
;

154 
ush‹t
 
	mss0
;

155 
ush‹t
 
	m∑ddög1
;

156 
uöt
 *
	me•1
;

157 
ush‹t
 
	mss1
;

158 
ush‹t
 
	m∑ddög2
;

159 
uöt
 *
	me•2
;

160 
ush‹t
 
	mss2
;

161 
ush‹t
 
	m∑ddög3
;

162 *
	m¸3
;

163 
uöt
 *
	meù
;

164 
uöt
 
	meÊags
;

165 
uöt
 
	móx
;

166 
uöt
 
	mecx
;

167 
uöt
 
	medx
;

168 
uöt
 
	mebx
;

169 
uöt
 *
	me•
;

170 
uöt
 *
	mebp
;

171 
uöt
 
	mesi
;

172 
uöt
 
	medi
;

173 
ush‹t
 
	mes
;

174 
ush‹t
 
	m∑ddög4
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
ush‹t
 
	mss
;

178 
ush‹t
 
	m∑ddög6
;

179 
ush‹t
 
	mds
;

180 
ush‹t
 
	m∑ddög7
;

181 
ush‹t
 
	mfs
;

182 
ush‹t
 
	m∑ddög8
;

183 
ush‹t
 
	mgs
;

184 
ush‹t
 
	m∑ddög9
;

185 
ush‹t
 
	mldt
;

186 
ush‹t
 
	m∑ddög10
;

187 
ush‹t
 
	mt
;

188 
ush‹t
 
	miomb
;

193 
	sg©edesc
 {

194 
uöt
 
	moff_15_0
 : 16;

195 
uöt
 
	mcs
 : 16;

196 
uöt
 
	m¨gs
 : 5;

197 
uöt
 
	mrsv1
 : 3;

198 
uöt
 
	mty≥
 : 4;

199 
uöt
 
	ms
 : 1;

200 
uöt
 
	md∂
 : 2;

201 
uöt
 
	mp
 : 1;

202 
uöt
 
	moff_31_16
 : 16;

213 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

215 (
g©e
).
off_15_0
 = (
uöt
)(
off
) & 0xffff; \

216 (
g©e
).
cs
 = (
£l
); \

217 (
g©e
).
¨gs
 = 0; \

218 (
g©e
).
rsv1
 = 0; \

219 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

220 (
g©e
).
s
 = 0; \

221 (
g©e
).
d∂
 = (
d
); \

222 (
g©e
).
p
 = 1; \

223 (
g©e
).
off_31_16
 = (
uöt
)(
off
) >> 16; \

224 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mp.h
"

10 
	~"x86.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

14 
˝u
 
	g˝us
[
NCPU
];

15 
˝u
 *
	gb˝u
;

16 
	gismp
;

17 
	gn˝u
;

18 
uch¨
 
	giﬂpicid
;

21 
	$mpb˝u
()

23  
b˝u
-
˝us
;

24 
	}
}

26 
uch¨


27 
	$sum
(
uch¨
 *
addr
, 
Àn
)

29 
i
, 
sum
;

31 
sum
 = 0;

32 
i
=0; i<
Àn
; i++)

33 
sum
 +
addr
[
i
];

34  
sum
;

35 
	}
}

38 
mp
*

39 
	$mp£¨ch1
(
uöt
 
a
, 
Àn
)

41 
uch¨
 *
e
, *
p
, *
addr
;

43 
addr
 = 
	`p2v
(
a
);

44 
e
 = 
addr
+
Àn
;

45 
p
 = 
addr
;Ö < 
e
;Ö +(
mp
))

46 if(
	`memcmp
(
p
, "_MP_", 4Ë=0 && 
	`sum
’, (
mp
)) == 0)

47  (
mp
*)
p
;

49 
	}
}

56 
mp
*

57 
	$mp£¨ch
()

59 
uch¨
 *
bda
;

60 
uöt
 
p
;

61 
mp
 *mp;

63 
bda
 = (
uch¨
 *Ë
	`P2V
(0x400);

64 if((
p
 = ((
bda
[0x0F]<<8)| bda[0x0E]) << 4)){

65 if((
mp
 = 
	`mp£¨ch1
(
p
, 1024)))

66  
mp
;

68 
p
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

69 if((
mp
 = 
	`mp£¨ch1
(
p
-1024, 1024)))

70  
mp
;

72  
	`mp£¨ch1
(0xF0000, 0x10000);

73 
	}
}

80 
mpc⁄f
*

81 
	$mpc⁄fig
(
mp
 **
pmp
)

83 
mpc⁄f
 *
c⁄f
;

84 
mp
 *mp;

86 if((
mp
 = 
	`mp£¨ch
()Ë=0 || mp->
phyßddr
 == 0)

88 
c⁄f
 = (
mpc⁄f
*Ë
	`p2v
((
uöt
Ë
mp
->
phyßddr
);

89 if(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0)

91 if(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

93 if(
	`sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

95 *
pmp
 = 
mp
;

96  
c⁄f
;

97 
	}
}

100 
	$mpöô
()

102 
uch¨
 *
p
, *
e
;

103 
mp
 *mp;

104 
mpc⁄f
 *
c⁄f
;

105 
mµroc
 *
¥oc
;

106 
mpiﬂpic
 *
iﬂpic
;

108 
b˝u
 = &
˝us
[0];

109 if((
c⁄f
 = 
	`mpc⁄fig
(&
mp
)) == 0)

111 
ismp
 = 1;

112 
œpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

113 
p
=(
uch¨
*)(
c⁄f
+1), 
e
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

114 *
p
){

115 
MPPROC
:

116 
¥oc
 = (
mµroc
*)
p
;

117 if(
n˝u
 !
¥oc
->
≠icid
){

118 
	`˝rötf
("mpöô:Ç˝u=%dápicid=%d\n", 
n˝u
, 
¥oc
->
≠icid
);

119 
ismp
 = 0;

121 if(
¥oc
->
Êags
 & 
MPBOOT
)

122 
b˝u
 = &
˝us
[
n˝u
];

123 
˝us
[
n˝u
].
id
 =Çcpu;

124 
n˝u
++;

125 
p
 +(
mµroc
);

127 
MPIOAPIC
:

128 
iﬂpic
 = (
mpiﬂpic
*)
p
;

129 
iﬂpicid
 = 
iﬂpic
->
≠i˙o
;

130 
p
 +(
mpiﬂpic
);

132 
MPBUS
:

133 
MPIOINTR
:

134 
MPLINTR
:

135 
p
 += 8;

138 
	`˝rötf
("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

139 
ismp
 = 0;

142 if(!
ismp
){

144 
n˝u
 = 1;

145 
œpic
 = 0;

146 
iﬂpicid
 = 0;

150 if(
mp
->
im¸p
){

153 
	`outb
(0x22, 0x70);

154 
	`outb
(0x23, 
	`öb
(0x23) | 1);

156 
	}
}

	@mp.h

3 
	smp
 {

4 
uch¨
 
	msig«tuª
[4];

5 *
	mphyßddr
;

6 
uch¨
 
	mÀngth
;

7 
uch¨
 
	m•e¸ev
;

8 
uch¨
 
	mchecksum
;

9 
uch¨
 
	mty≥
;

10 
uch¨
 
	mim¸p
;

11 
uch¨
 
	mª£rved
[3];

14 
	smpc⁄f
 {

15 
uch¨
 
	msig«tuª
[4];

16 
ush‹t
 
	mÀngth
;

17 
uch¨
 
	mvîsi⁄
;

18 
uch¨
 
	mchecksum
;

19 
uch¨
 
	m¥odu˘
[20];

20 
uöt
 *
	m€mèbÀ
;

21 
ush‹t
 
	m€mÀngth
;

22 
ush‹t
 
	míåy
;

23 
uöt
 *
	mœpiˇddr
;

24 
ush‹t
 
	mxÀngth
;

25 
uch¨
 
	mxchecksum
;

26 
uch¨
 
	mª£rved
;

29 
	smµroc
 {

30 
uch¨
 
	mty≥
;

31 
uch¨
 
	m≠icid
;

32 
uch¨
 
	mvîsi⁄
;

33 
uch¨
 
	mÊags
;

34 
	#MPBOOT
 0x02

35 
uch¨
 
sig«tuª
[4];

36 
uöt
 
„©uª
;

37 
uch¨
 
ª£rved
[8];

	)

40 
	smpiﬂpic
 {

41 
uch¨
 
	mty≥
;

42 
uch¨
 
	m≠i˙o
;

43 
uch¨
 
	mvîsi⁄
;

44 
uch¨
 
	mÊags
;

45 
uöt
 *
	maddr
;

49 
	#MPPROC
 0x00

50 
	#MPBUS
 0x01

51 
	#MPIOAPIC
 0x02

52 
	#MPIOINTR
 0x03

53 
	#MPLINTR
 0x04

54 

	)

	@param.h

1 
	#NPROC
 64

2 
	#KSTACKSIZE
 4096

3 
	#NCPU
 8

4 
	#NOFILE
 16

5 
	#NFILE
 100

6 
	#NINODE
 50

7 
	#NDEV
 10

8 
	#ROOTDEV
 1

9 
	#MAXARG
 32

10 
	#MAXOPBLOCKS
 10

11 
	#LOGSIZE
 (
MAXOPBLOCKS
*3)

12 
	#NBUF
 (
MAXOPBLOCKS
*3)

13 

	)

	@parent.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	$∑ª¡
() {

7 
ªtvÆ
;

9 if((
ªtvÆ
 = 
	`f‹k
()) < 0){

10 
	`¥ötf
(1, "FORK FAILED!!!");

11 }if(
ªtvÆ
 > 0){

12 
	`¥ötf
(1, "Me: %d MyChûd: %d\n", 
	`gëpid
(), 
ªtvÆ
);

13 
	`waô
();

15 
	`¥ötf
(1, "Me: %d MyP¨ít: %d\n", 
	`gëpid
(), 
	`gëµid
());

18 
	}
}

20 
	$hñlo
(){

22 
	`¥ötf
(1, "Hello World!!!\n");

23 
	`¥ötf
(1, "Iám Child\n");

24 
	`exô
();

25 
	}
}

27 
	$˘
(){

31 
uöt
 
a
 = (uöt)
	`mÆloc
(4096);

32 
ªtvÆ
 = 
	`¸óãThªad
(
a
, (
uöt
)
hñlo
);

47 
	`¥ötf
(1, "In Parent!!!\n");

48 
	`¥ötf
(1, "My Chûd: %d\n", 
ªtvÆ
);

49 
	`¶ìp
(500);

50 
	`waô
();

51 
	`¥ötf
(1, "All my children finishedÅheirÉxecution\n");

52 
	}
}

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 
	$pic£tmask
(
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
(
IO_PIC1
+1, 
mask
);

22 
	`outb
(
IO_PIC2
+1, 
mask
 >> 8);

23 
	}
}

26 
	$pi˚«bÀ
(
úq
)

28 
	`pic£tmask
(
úqmask
 & ~(1<<
úq
));

29 
	}
}

33 
	$picöô
()

36 
	`outb
(
IO_PIC1
+1, 0xFF);

37 
	`outb
(
IO_PIC2
+1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
+1, 
T_IRQ0
);

52 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
+1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
+1, 
T_IRQ0
 + 8);

67 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
+1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 if(
úqmask
 != 0xFFFF)

83 
	`pic£tmask
(
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fs.h
"

7 
	~"fûe.h
"

8 
	~"•ölock.h
"

10 
	#PIPESIZE
 512

	)

12 
	spùe
 {

13 
•ölock
 
	mlock
;

14 
	md©a
[
PIPESIZE
];

15 
uöt
 
	mƒód
;

16 
uöt
 
	mnwrôe
;

17 
	mªad›í
;

18 
	mwrôe›í
;

22 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

24 
pùe
 *
p
;

26 
p
 = 0;

27 *
f0
 = *
f1
 = 0;

28 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

29 
bad
;

30 if((
p
 = (
pùe
*)
	`kÆloc
()) == 0)

31 
bad
;

32 
p
->
ªad›í
 = 1;

33 
p
->
wrôe›í
 = 1;

34 
p
->
nwrôe
 = 0;

35 
p
->
ƒód
 = 0;

36 
	`öôlock
(&
p
->
lock
, "pipe");

37 (*
f0
)->
ty≥
 = 
FD_PIPE
;

38 (*
f0
)->
ªadabÀ
 = 1;

39 (*
f0
)->
wrôabÀ
 = 0;

40 (*
f0
)->
pùe
 = 
p
;

41 (*
f1
)->
ty≥
 = 
FD_PIPE
;

42 (*
f1
)->
ªadabÀ
 = 0;

43 (*
f1
)->
wrôabÀ
 = 1;

44 (*
f1
)->
pùe
 = 
p
;

48 
bad
:

49 if(
p
)

50 
	`k‰ì
((*)
p
);

51 if(*
f0
)

52 
	`fûe˛o£
(*
f0
);

53 if(*
f1
)

54 
	`fûe˛o£
(*
f1
);

56 
	}
}

59 
	$pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

61 
	`acquúe
(&
p
->
lock
);

62 if(
wrôabÀ
){

63 
p
->
wrôe›í
 = 0;

64 
	`wakeup
(&
p
->
ƒód
);

66 
p
->
ªad›í
 = 0;

67 
	`wakeup
(&
p
->
nwrôe
);

69 if(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0){

70 
	`ªÀa£
(&
p
->
lock
);

71 
	`k‰ì
((*)
p
);

73 
	`ªÀa£
(&
p
->
lock
);

74 
	}
}

78 
	$pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 
i
;

82 
	`acquúe
(&
p
->
lock
);

83 
i
 = 0; i < 
n
; i++){

84 
p
->
nwrôe
 =p->
ƒód
 + 
PIPESIZE
){

85 if(
p
->
ªad›í
 =0 || 
¥oc
->
kûÀd
){

86 
	`ªÀa£
(&
p
->
lock
);

89 
	`wakeup
(&
p
->
ƒód
);

90 
	`¶ìp
(&
p
->
nwrôe
, &p->
lock
);

92 
p
->
d©a
[p->
nwrôe
++ % 
PIPESIZE
] = 
addr
[
i
];

94 
	`wakeup
(&
p
->
ƒód
);

95 
	`ªÀa£
(&
p
->
lock
);

96  
n
;

97 
	}
}

100 
	$pùîód
(
pùe
 *
p
, *
addr
, 
n
)

102 
i
;

104 
	`acquúe
(&
p
->
lock
);

105 
p
->
ƒód
 =p->
nwrôe
 &&Ö->
wrôe›í
){

106 if(
¥oc
->
kûÀd
){

107 
	`ªÀa£
(&
p
->
lock
);

110 
	`¶ìp
(&
p
->
ƒód
, &p->
lock
);

112 
i
 = 0; i < 
n
; i++){

113 if(
p
->
ƒód
 =p->
nwrôe
)

115 
addr
[
i
] = 
p
->
d©a
[p->
ƒód
++ % 
PIPESIZE
];

117 
	`wakeup
(&
p
->
nwrôe
);

118 
	`ªÀa£
(&
p
->
lock
);

119  
i
;

120 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
(
fd
, 
c
)

8 
	`wrôe
(
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 if(
sgn
 && 
xx
 < 0){

21 
√g
 = 1;

22 
x
 = -
xx
;

24 
x
 = 
xx
;

27 
i
 = 0;

29 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

30 }(
x
 /
ba£
) != 0);

31 if(
√g
)

32 
buf
[
i
++] = '-';

34 --
i
 >= 0)

35 
	`putc
(
fd
, 
buf
[
i
]);

36 
	}
}

40 
	$¥ötf
(
fd
, *
fmt
, ...)

42 *
s
;

43 
c
, 
i
, 
°©e
;

44 
uöt
 *
≠
;

46 
°©e
 = 0;

47 
≠
 = (
uöt
*)(*)&
fmt
 + 1;

48 
i
 = 0; 
fmt
[i]; i++){

49 
c
 = 
fmt
[
i
] & 0xff;

50 if(
°©e
 == 0){

51 if(
c
 == '%'){

52 
°©e
 = '%';

54 
	`putc
(
fd
, 
c
);

56 } if(
°©e
 == '%'){

57 if(
c
 == 'd'){

58 
	`¥ötöt
(
fd
, *
≠
, 10, 1);

59 
≠
++;

60 } if(
c
 == 'x' || c == 'p'){

61 
	`¥ötöt
(
fd
, *
≠
, 16, 0);

62 
≠
++;

63 } if(
c
 == 's'){

64 
s
 = (*)*
≠
;

65 
≠
++;

66 if(
s
 == 0)

67 
s
 = "(null)";

68 *
s
 != 0){

69 
	`putc
(
fd
, *
s
);

70 
s
++;

72 } if(
c
 == 'c'){

73 
	`putc
(
fd
, *
≠
);

74 
≠
++;

75 } if(
c
 == '%'){

76 
	`putc
(
fd
, 
c
);

79 
	`putc
(
fd
, '%');

80 
	`putc
(
fd
, 
c
);

82 
°©e
 = 0;

85 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"x86.h
"

7 
	~"¥oc.h
"

8 
	~"•ölock.h
"

11 
•ölock
 
	mlock
;

12 
¥oc
 
	m¥oc
[
NPROC
];

13 } 
	g±abÀ
;

15 
¥oc
 *
	göô¥oc
;

17 
	g√xçid
 = 1;

18 
f‹kªt
();

19 
å≠ªt
();

21 
wakeup1
(*
ch™
);

24 
	$pöô
()

26 
	`öôlock
(&
±abÀ
.
lock
, "ptable");

27 
	}
}

34 
¥oc
*

35 
	$Ælo˝roc
()

37 
¥oc
 *
p
;

38 *
•
;

40 
	`acquúe
(&
±abÀ
.
lock
);

41 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

42 if(
p
->
°©e
 =
UNUSED
)

43 
found
;

44 
	`ªÀa£
(&
±abÀ
.
lock
);

47 
found
:

48 
p
->
°©e
 = 
EMBRYO
;

49 
p
->
pid
 = 
√xçid
++;

50 
	`ªÀa£
(&
±abÀ
.
lock
);

53 if((
p
->
k°ack
 = 
	`kÆloc
()) == 0){

54 
p
->
°©e
 = 
UNUSED
;

57 
•
 = 
p
->
k°ack
 + 
KSTACKSIZE
;

60 
•
 - *
p
->
tf
;

61 
p
->
tf
 = (
å≠‰ame
*)
•
;

65 
•
 -= 4;

66 *(
uöt
*)
•
 = (uöt)
å≠ªt
;

68 
•
 - *
p
->
c⁄ãxt
;

69 
p
->
c⁄ãxt
 = (c⁄ãxt*)
•
;

70 
	`mem£t
(
p
->
c⁄ãxt
, 0,  *p->context);

71 
p
->
c⁄ãxt
->
eù
 = (
uöt
)
f‹kªt
;

73  
p
;

74 
	}
}

79 
	$u£röô
()

81 
¥oc
 *
p
;

82 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

84 
p
 = 
	`Ælo˝roc
();

85 
öô¥oc
 = 
p
;

86 if((
p
->
pgdú
 = 
	`£tupkvm
()) == 0)

87 
	`∑nic
("userinit: out of memory?");

88 
	`öôuvm
(
p
->
pgdú
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

89 
p
->
sz
 = 
PGSIZE
;

90 
	`mem£t
(
p
->
tf
, 0, (*p->tf));

91 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

92 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

93 
p
->
tf
->
es
 =Ö->tf->
ds
;

94 
p
->
tf
->
ss
 =Ö->tf->
ds
;

95 
p
->
tf
->
eÊags
 = 
FL_IF
;

96 
p
->
tf
->
e•
 = 
PGSIZE
;

97 
p
->
tf
->
eù
 = 0;

99 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

100 
p
->
cwd
 = 
	`«mei
("/");

102 
p
->
°©e
 = 
RUNNABLE
;

103 
	}
}

108 
	$grow¥oc
(
n
)

110 
uöt
 
sz
;

112 
sz
 = 
¥oc
->sz;

113 if(
n
 > 0){

114 if((
sz
 = 
	`Ælocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

116 } if(
n
 < 0){

117 if((
sz
 = 
	`dóŒocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

120 
¥oc
->
sz
 = sz;

121 
	`swôchuvm
(
¥oc
);

123 
	}
}

129 
	$f‹k
(*
u°ack
, 
uöt
 
wøµîaddr
, uöà
¨g1
, uöà
¨g2
)

131 
i
, 
pid
;

132 
¥oc
 *
≈
;

135 if((
≈
 = 
	`Ælo˝roc
()) == 0)

138 if(
¥oc
->
˘Êag
){

140 
≈
->
pgdú
 = 
¥oc
->pgdir;

142 
≈
->
ty≥
 = 1;

148 if((
≈
->
pgdú
 = 
	`c›yuvm
(
¥oc
->pgdú,Öroc->
sz
)) == 0){

149 
	`k‰ì
(
≈
->
k°ack
);

150 
≈
->
k°ack
 = 0;

151 
≈
->
°©e
 = 
UNUSED
;

155 
≈
->
ty≥
 = 0;

158 
≈
->
sz
 = 
¥oc
->sz;

160 if(
¥oc
->
ty≥
 &&Öroc->
˘Êag
)

161 
≈
->
∑ª¡
 = 
¥oc
->parent;

163 
≈
->
∑ª¡
 = 
¥oc
;

165 *
≈
->
tf
 = *
¥oc
->tf;

167 if(
¥oc
->
˘Êag
){

169 
≈
->
tf
->
eù
 = 
wøµîaddr
;

171 
¥oc
->
u°ack
 = ustack;

173 
uöt
 *
•
 = (uöt*)
¥oc
->
u°ack
;

175 *(--
•
Ë
¨g2
;

176 *(--
•
Ë
¨g1
;

177 *(--
•
) = 0;

179 
≈
->
tf
->
e•
 = (
uöt
)
•
;

180 
¥oc
->
tcou¡
+=1;

184 
≈
->
tf
->
óx
 = 0;

186 
i
 = 0; i < 
NOFILE
; i++)

187 if(
¥oc
->
ofûe
[
i
])

188 
≈
->
ofûe
[
i
] = 
	`fûedup
(
¥oc
->ofile[i]);

189 
≈
->
cwd
 = 
	`idup
(
¥oc
->cwd);

191 
	`ß„°r˝y
(
≈
->
«me
, 
¥oc
->name, (proc->name));

193 
pid
 = 
≈
->pid;

196 
	`acquúe
(&
±abÀ
.
lock
);

197 
≈
->
°©e
 = 
RUNNABLE
;

198 
	`ªÀa£
(&
±abÀ
.
lock
);

200  
pid
;

202 
	}
}

208 
	$exô
()

210 
¥oc
 *
p
;

211 
fd
;

213 if(
¥oc
 =
öô¥oc
)

214 
	`∑nic
("initÉxiting");

217 
fd
 = 0; fd < 
NOFILE
; fd++){

218 if(
¥oc
->
ofûe
[
fd
]){

219 
	`fûe˛o£
(
¥oc
->
ofûe
[
fd
]);

220 
¥oc
->
ofûe
[
fd
] = 0;

224 
	`begö_›
();

225 
	`ùut
(
¥oc
->
cwd
);

226 
	`íd_›
();

227 
¥oc
->
cwd
 = 0;

229 
	`acquúe
(&
±abÀ
.
lock
);

232 
	`wakeup1
(
¥oc
->
∑ª¡
);

235 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

236 if(
p
->
∑ª¡
 =
¥oc
){

237 
p
->
∑ª¡
 = 
öô¥oc
;

238 if(
p
->
°©e
 =
ZOMBIE
)

239 
	`wakeup1
(
öô¥oc
);

244 
¥oc
->
°©e
 = 
ZOMBIE
;

245 
	`sched
();

246 
	`∑nic
("zombieÉxit");

247 
	}
}

252 
	$waô
(
uöt
 
tid
)

254 
¥oc
 *
p
;

255 
havekids
, 
pid
;

257 
	`acquúe
(&
±abÀ
.
lock
);

260 
havekids
 = 0;

261 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

262 if(
p
->
∑ª¡
 !
¥oc
)

265 if(
tid
)

266 if(
tid
 !
p
->
pid
)

269 
havekids
 = 1;

271 if(
p
->
°©e
 =
ZOMBIE
){

273 
pid
 = 
p
->pid;

274 
	`k‰ì
(
p
->
k°ack
);

275 
p
->
k°ack
 = 0;

277 if(!
p
->
ty≥
 && (p->
tcou¡
 == 0))

278 
	`‰ìvm
(
p
->
pgdú
);

280 
p
->
pgdú
 = 0;

281 
p
->
∑ª¡
->
tcou¡
-=1;

284 
p
->
°©e
 = 
UNUSED
;

285 
p
->
pid
 = 0;

286 
p
->
∑ª¡
 = 0;

287 
p
->
«me
[0] = 0;

288 
p
->
kûÀd
 = 0;

289 
	`ªÀa£
(&
±abÀ
.
lock
);

290  
pid
;

295 if(!
havekids
 || 
¥oc
->
kûÀd
){

296 
	`ªÀa£
(&
±abÀ
.
lock
);

301 
	`¶ìp
(
¥oc
, &
±abÀ
.
lock
);

303 
	}
}

314 
	$scheduÀr
()

316 
¥oc
 *
p
;

320 
	`°i
();

323 
	`acquúe
(&
±abÀ
.
lock
);

324 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

325 if(
p
->
°©e
 !
RUNNABLE
)

331 
¥oc
 = 
p
;

332 
	`swôchuvm
(
p
);

333 
p
->
°©e
 = 
RUNNING
;

334 
	`swtch
(&
˝u
->
scheduÀr
, 
¥oc
->
c⁄ãxt
);

335 
	`swôchkvm
();

339 
¥oc
 = 0;

341 
	`ªÀa£
(&
±abÀ
.
lock
);

344 
	}
}

349 
	$sched
()

351 
öã«
;

353 if(!
	`hﬁdög
(&
±abÀ
.
lock
))

354 
	`∑nic
("schedÖtable.lock");

355 if(
˝u
->
n˛i
 != 1)

356 
	`∑nic
("schedÜocks");

357 if(
¥oc
->
°©e
 =
RUNNING
)

358 
	`∑nic
("schedÑunning");

359 if(
	`ªadeÊags
()&
FL_IF
)

360 
	`∑nic
("sched interruptible");

361 
öã«
 = 
˝u
->intena;

362 
	`swtch
(&
¥oc
->
c⁄ãxt
, 
˝u
->
scheduÀr
);

363 
˝u
->
öã«
 = intena;

364 
	}
}

368 
	$yõld
()

370 
	`acquúe
(&
±abÀ
.
lock
);

371 
¥oc
->
°©e
 = 
RUNNABLE
;

372 
	`sched
();

373 
	`ªÀa£
(&
±abÀ
.
lock
);

374 
	}
}

379 
	$f‹kªt
()

381 
fú°
 = 1;

383 
	`ªÀa£
(&
±abÀ
.
lock
);

385 i‡(
fú°
) {

389 
fú°
 = 0;

390 
	`öôlog
();

394 
	}
}

399 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

401 if(
¥oc
 == 0)

402 
	`∑nic
("sleep");

404 if(
lk
 == 0)

405 
	`∑nic
("sleep withoutÜk");

413 if(
lk
 !&
±abÀ
.
lock
){

414 
	`acquúe
(&
±abÀ
.
lock
);

415 
	`ªÀa£
(
lk
);

419 
¥oc
->
ch™
 = chan;

420 
¥oc
->
°©e
 = 
SLEEPING
;

421 
	`sched
();

424 
¥oc
->
ch™
 = 0;

427 if(
lk
 !&
±abÀ
.
lock
){

428 
	`ªÀa£
(&
±abÀ
.
lock
);

429 
	`acquúe
(
lk
);

431 
	}
}

437 
	$wakeup1
(*
ch™
)

439 
¥oc
 *
p
;

441 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

442 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

443 
p
->
°©e
 = 
RUNNABLE
;

444 
	}
}

448 
	$wakeup
(*
ch™
)

450 
	`acquúe
(&
±abÀ
.
lock
);

451 
	`wakeup1
(
ch™
);

452 
	`ªÀa£
(&
±abÀ
.
lock
);

453 
	}
}

459 
	$kûl
(
pid
)

461 
¥oc
 *
p
;

463 
	`acquúe
(&
±abÀ
.
lock
);

464 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

465 if(
p
->
pid
 ==Öid){

466 
p
->
kûÀd
 = 1;

468 if(
p
->
°©e
 =
SLEEPING
)

469 
p
->
°©e
 = 
RUNNABLE
;

470 
	`ªÀa£
(&
±abÀ
.
lock
);

474 
	`ªÀa£
(&
±abÀ
.
lock
);

476 
	}
}

483 
	$¥ocdump
()

485 *
°©es
[] = {

486 [
UNUSED
] "unused",

487 [
EMBRYO
] "embryo",

488 [
SLEEPING
] "sleep ",

489 [
RUNNABLE
] "runble",

490 [
RUNNING
] "run ",

491 [
ZOMBIE
] "zombie"

493 
i
;

494 
¥oc
 *
p
;

495 *
°©e
;

496 
uöt
 
pc
[10];

498 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

499 if(
p
->
°©e
 =
UNUSED
)

501 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

502 
°©e
 = 
°©es
[
p
->state];

504 
°©e
 = "???";

505 
	`˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

506 if(
p
->
°©e
 =
SLEEPING
){

507 
	`gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
->
ebp
+2, 
pc
);

508 
i
=0; i<10 && 
pc
[i] != 0; i++)

509 
	`˝rötf
(" %p", 
pc
[
i
]);

511 
	`˝rötf
("\n");

513 
	}
}

	@proc.h

2 
	#NSEGS
 7

	)

5 
	s˝u
 {

6 
uch¨
 
	mid
;

7 
c⁄ãxt
 *
	mscheduÀr
;

8 
èsk°©e
 
	mts
;

9 
£gdesc
 
	mgdt
[
NSEGS
];

10 vﬁ©ûê
uöt
 
	m°¨ãd
;

11 
	mn˛i
;

12 
	möã«
;

15 
˝u
 *
	m˝u
;

16 
¥oc
 *
	m¥oc
;

19 
˝u
 
˝us
[
NCPU
];

20 
n˝u
;

30 
˝u
 *˝u 
asm
("%gs:0");

31 
¥oc
 *¥o¯
asm
("%gs:4");

44 
	sc⁄ãxt
 {

45 
uöt
 
	medi
;

46 
uöt
 
	mesi
;

47 
uöt
 
	mebx
;

48 
uöt
 
	mebp
;

49 
uöt
 
	meù
;

52 
	e¥oc°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

58 
	s¥oc
 {

59 
uöt
 
	msz
;

60 
pde_t
* 
	mpgdú
;

61 *
	mk°ack
;

62 
¥oc°©e
 
	m°©e
;

63 
	mpid
;

64 
¥oc
 *
	m∑ª¡
;

65 
å≠‰ame
 *
	mtf
;

66 
c⁄ãxt
 *
	mc⁄ãxt
;

67 *
	mch™
;

68 
	mkûÀd
;

69 
fûe
 *
	mofûe
[
NOFILE
];

70 
öode
 *
	mcwd
;

71 
	m«me
[16];

75 
	m˘Êag
;

76 
	mty≥
;

77 
uöt
 
	mwøµî
;

78 *
	mu°ack
;

79 
uöt
 
	mtcou¡
;

	@qthread.c

1 
	~"ty≥s.h
"

2 
	~"qthªad.h
"

3 
	~"u£r.h
"

5 
	#THREADSTACKSIZE
 4096

	)

7 
	$wøµî
(
qthªad_func_±r_t
 
func
, *
¨g
) {

9 
	`func
(
¨g
);

10 
	`exô
();

11 
	}
}

13 
	$qthªad_¸óã
(
qthªad_t
 *
thªad
, 
qthªad_func_±r_t
 
my_func
, *
¨g
) {

15 *
thªad
 = (
qthªad_t
)
	`mÆloc
((
qthªad
));

16 
t_id
 = 
	`kthªad_¸óã
(()
	`mÆloc
(
THREADSTACKSIZE
), ()
wøµî
, ()
my_func
, *(*)
¨g
);

17 (*
thªad
)->
tid
 = 
t_id
;

18  
t_id
;

19 
	}
}

21 
	$qthªad_joö
(
qthªad_t
 
thªad
, **
ªtvÆ
){

23 
vÆ
 = 
	`kthªad_joö
(
thªad
->
tid
, ()
ªtvÆ
);

24  
vÆ
;

25 
	}
}

	@qthread.h

1 
	gqthªad
;

2 
	gqthªad_muãx
;

3 
	gqthªad_c⁄d
;

4 
	gqthªadLi°
;

8 *(*
	tqthªad_func_±r_t
)(*);

10 
qthªad
 *
	tqthªad_t
;

11 
qthªad_muãx
 
	tqthªad_muãx_t
;

12 
qthªad_c⁄d
 
	tqthªad_c⁄d_t
;

14 
qthªad_¸óã
(
qthªad_t
 *
thªad
, 
qthªad_func_±r_t
 
°¨t
, *
¨g
);

15 
qthªad_joö
(
qthªad_t
 
thªad
, **
ªtvÆ
);

16 
qthªad_exô
(*
vÆ
);

18 
qthªad_muãx_öô
(
qthªad_muãx_t
 *
muãx
);

19 
qthªad_muãx_de°roy
(
qthªad_muãx_t
 *
muãx
);

20 
qthªad_muãx_lock
(
qthªad_muãx_t
 *
muãx
);

21 
qthªad_muãx_u∆ock
(
qthªad_muãx_t
 *
muãx
);

23 
qthªad_c⁄d_öô
(
qthªad_c⁄d_t
 *
c⁄d
);

24 
qthªad_c⁄d_de°roy
(
qthªad_c⁄d_t
 *
c⁄d
);

25 
qthªad_c⁄d_waô
(
qthªad_c⁄d_t
 *
c⁄d
, 
qthªad_muãx_t
 *
muãx
);

26 
qthªad_c⁄d_sig«l
(
qthªad_c⁄d_t
 *
c⁄d
);

27 
qthªad_c⁄d_brﬂdˇ°
(
qthªad_c⁄d_t
 *
c⁄d
);

31 
	sqthªad
 {

32 
	mtid
;

36 
	sqthªad_muãx
 {

37 
	m°©e
;

40 
	sqthªad_c⁄d
 {

41 
qthªadLi°
 *
	mwaôögLi°
;

45 
	sqthªadLi°
 {

46 
qthªad_t
 
	mthªad
;

47 
qthªadLi°
 *
	m√xt
;

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage:Ñm files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
();

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
();

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
();

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
();

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
();

121 
	`waô
();

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
();

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`¥ötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

163 
buf
[
	`°æí
(buf)-1] = 0;

164 if(
	`chdú
(
buf
+3) < 0)

165 
	`¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

168 if(
	`f‹k1
() == 0)

169 
	`runcmd
(
	`∑r£cmd
(
buf
));

170 
	`waô
();

172 
	`exô
();

173 
	}
}

176 
	$∑nic
(*
s
)

178 
	`¥ötf
(2, "%s\n", 
s
);

179 
	`exô
();

180 
	}
}

183 
	$f‹k1
()

185 
pid
;

187 
pid
 = 
	`f‹k
();

188 if(
pid
 == -1)

189 
	`∑nic
("fork");

190  
pid
;

191 
	}
}

196 
cmd
*

197 
	$execcmd
()

199 
execcmd
 *
cmd
;

201 
cmd
 = 
	`mÆloc
((*cmd));

202 
	`mem£t
(
cmd
, 0, (*cmd));

203 
cmd
->
ty≥
 = 
EXEC
;

204  (
cmd
*)cmd;

205 
	}
}

207 
cmd
*

208 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

210 
ªdúcmd
 *
cmd
;

212 
cmd
 = 
	`mÆloc
((*cmd));

213 
	`mem£t
(
cmd
, 0, (*cmd));

214 
cmd
->
ty≥
 = 
REDIR
;

215 
cmd
->cmd = 
subcmd
;

216 
cmd
->
fûe
 = file;

217 
cmd
->
efûe
 =Éfile;

218 
cmd
->
mode
 = mode;

219 
cmd
->
fd
 = fd;

220  (
cmd
*)cmd;

221 
	}
}

223 
cmd
*

224 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

226 
pùecmd
 *
cmd
;

228 
cmd
 = 
	`mÆloc
((*cmd));

229 
	`mem£t
(
cmd
, 0, (*cmd));

230 
cmd
->
ty≥
 = 
PIPE
;

231 
cmd
->
À·
 =Üeft;

232 
cmd
->
right
 =Ñight;

233  (
cmd
*)cmd;

234 
	}
}

236 
cmd
*

237 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

239 
li°cmd
 *
cmd
;

241 
cmd
 = 
	`mÆloc
((*cmd));

242 
	`mem£t
(
cmd
, 0, (*cmd));

243 
cmd
->
ty≥
 = 
LIST
;

244 
cmd
->
À·
 =Üeft;

245 
cmd
->
right
 =Ñight;

246  (
cmd
*)cmd;

247 
	}
}

249 
cmd
*

250 
	$backcmd
(
cmd
 *
subcmd
)

252 
backcmd
 *
cmd
;

254 
cmd
 = 
	`mÆloc
((*cmd));

255 
	`mem£t
(
cmd
, 0, (*cmd));

256 
cmd
->
ty≥
 = 
BACK
;

257 
cmd
->cmd = 
subcmd
;

258  (
cmd
*)cmd;

259 
	}
}

263 
	gwhôe•a˚
[] = " \t\r\n\v";

264 
	gsymbﬁs
[] = "<|>&;()";

267 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

269 *
s
;

270 
ªt
;

272 
s
 = *
ps
;

273 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

274 
s
++;

275 if(
q
)

276 *
q
 = 
s
;

277 
ªt
 = *
s
;

278 *
s
){

287 
s
++;

290 
s
++;

291 if(*
s
 == '>'){

292 
ªt
 = '+';

293 
s
++;

297 
ªt
 = 'a';

298 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

299 
s
++;

302 if(
eq
)

303 *
eq
 = 
s
;

305 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

306 
s
++;

307 *
ps
 = 
s
;

308  
ªt
;

309 
	}
}

312 
	$≥ek
(**
ps
, *
es
, *
toks
)

314 *
s
;

316 
s
 = *
ps
;

317 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

318 
s
++;

319 *
ps
 = 
s
;

320  *
s
 && 
	`°rchr
(
toks
, *s);

321 
	}
}

323 
cmd
 *
∑r£löe
(**, *);

324 
cmd
 *
∑r£pùe
(**, *);

325 
cmd
 *
∑r£exec
(**, *);

326 
cmd
 *
nu…îmö©e
(cmd*);

328 
cmd
*

329 
	$∑r£cmd
(*
s
)

331 *
es
;

332 
cmd
 *cmd;

334 
es
 = 
s
 + 
	`°æí
(s);

335 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

336 
	`≥ek
(&
s
, 
es
, "");

337 if(
s
 !
es
){

338 
	`¥ötf
(2, "À·ovîs: %s\n", 
s
);

339 
	`∑nic
("syntax");

341 
	`nu…îmö©e
(
cmd
);

342  
cmd
;

343 
	}
}

345 
cmd
*

346 
	$∑r£löe
(**
ps
, *
es
)

348 
cmd
 *cmd;

350 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

351 
	`≥ek
(
ps
, 
es
, "&")){

352 
	`gëtokí
(
ps
, 
es
, 0, 0);

353 
cmd
 = 
	`backcmd
(cmd);

355 if(
	`≥ek
(
ps
, 
es
, ";")){

356 
	`gëtokí
(
ps
, 
es
, 0, 0);

357 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

359  
cmd
;

360 
	}
}

362 
cmd
*

363 
	$∑r£pùe
(**
ps
, *
es
)

365 
cmd
 *cmd;

367 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

368 if(
	`≥ek
(
ps
, 
es
, "|")){

369 
	`gëtokí
(
ps
, 
es
, 0, 0);

370 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

372  
cmd
;

373 
	}
}

375 
cmd
*

376 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

378 
tok
;

379 *
q
, *
eq
;

381 
	`≥ek
(
ps
, 
es
, "<>")){

382 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

383 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

384 
	`∑nic
("missing file forÑedirection");

385 
tok
){

387 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

390 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

393 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

397  
cmd
;

398 
	}
}

400 
cmd
*

401 
	$∑r£block
(**
ps
, *
es
)

403 
cmd
 *cmd;

405 if(!
	`≥ek
(
ps
, 
es
, "("))

406 
	`∑nic
("parseblock");

407 
	`gëtokí
(
ps
, 
es
, 0, 0);

408 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

409 if(!
	`≥ek
(
ps
, 
es
, ")"))

410 
	`∑nic
("syntax - missing )");

411 
	`gëtokí
(
ps
, 
es
, 0, 0);

412 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

413  
cmd
;

414 
	}
}

416 
cmd
*

417 
	$∑r£exec
(**
ps
, *
es
)

419 *
q
, *
eq
;

420 
tok
, 
¨gc
;

421 
execcmd
 *
cmd
;

422 
cmd
 *
ªt
;

424 if(
	`≥ek
(
ps
, 
es
, "("))

425  
	`∑r£block
(
ps
, 
es
);

427 
ªt
 = 
	`execcmd
();

428 
cmd
 = (
execcmd
*)
ªt
;

430 
¨gc
 = 0;

431 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

432 !
	`≥ek
(
ps
, 
es
, "|)&;")){

433 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

435 if(
tok
 != 'a')

436 
	`∑nic
("syntax");

437 
cmd
->
¨gv
[
¨gc
] = 
q
;

438 
cmd
->
órgv
[
¨gc
] = 
eq
;

439 
¨gc
++;

440 if(
¨gc
 >
MAXARGS
)

441 
	`∑nic
("too manyárgs");

442 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

444 
cmd
->
¨gv
[
¨gc
] = 0;

445 
cmd
->
órgv
[
¨gc
] = 0;

446  
ªt
;

447 
	}
}

450 
cmd
*

451 
	$nu…îmö©e
(
cmd
 *cmd)

453 
i
;

454 
backcmd
 *
bcmd
;

455 
execcmd
 *
ecmd
;

456 
li°cmd
 *
lcmd
;

457 
pùecmd
 *
pcmd
;

458 
ªdúcmd
 *
rcmd
;

460 if(
cmd
 == 0)

463 
cmd
->
ty≥
){

464 
EXEC
:

465 
ecmd
 = (
execcmd
*)
cmd
;

466 
i
=0; 
ecmd
->
¨gv
[i]; i++)

467 *
ecmd
->
órgv
[
i
] = 0;

470 
REDIR
:

471 
rcmd
 = (
ªdúcmd
*)
cmd
;

472 
	`nu…îmö©e
(
rcmd
->
cmd
);

473 *
rcmd
->
efûe
 = 0;

476 
PIPE
:

477 
pcmd
 = (
pùecmd
*)
cmd
;

478 
	`nu…îmö©e
(
pcmd
->
À·
);

479 
	`nu…îmö©e
(
pcmd
->
right
);

482 
LIST
:

483 
lcmd
 = (
li°cmd
*)
cmd
;

484 
	`nu…îmö©e
(
lcmd
->
À·
);

485 
	`nu…îmö©e
(
lcmd
->
right
);

488 
BACK
:

489 
bcmd
 = (
backcmd
*)
cmd
;

490 
	`nu…îmö©e
(
bcmd
->
cmd
);

493  
cmd
;

494 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

10 
	~"•ölock.h
"

13 
	$öôlock
(
•ölock
 *
lk
, *
«me
)

15 
lk
->
«me
 =Çame;

16 
lk
->
locked
 = 0;

17 
lk
->
˝u
 = 0;

18 
	}
}

25 
	$acquúe
(
•ölock
 *
lk
)

27 
	`push˛i
();

28 if(
	`hﬁdög
(
lk
))

29 
	`∑nic
("acquire");

34 
	`xchg
(&
lk
->
locked
, 1) != 0)

38 
lk
->
˝u
 = cpu;

39 
	`gëˇŒîpcs
(&
lk
,Ük->
pcs
);

40 
	}
}

44 
	$ªÀa£
(
•ölock
 *
lk
)

46 if(!
	`hﬁdög
(
lk
))

47 
	`∑nic
("release");

49 
lk
->
pcs
[0] = 0;

50 
lk
->
˝u
 = 0;

61 
	`xchg
(&
lk
->
locked
, 0);

63 
	`p›˛i
();

64 
	}
}

68 
	$gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
*)
v
 - 2;

74 
i
 = 0; i < 10; i++){

75 if(
ebp
 =0 ||Éb∞< (
uöt
*)
KERNBASE
 ||Ébp == (uint*)0xffffffff)

77 
pcs
[
i
] = 
ebp
[1];

78 
ebp
 = (
uöt
*)ebp[0];

80 ; 
i
 < 10; i++)

81 
pcs
[
i
] = 0;

82 
	}
}

86 
	$hﬁdög
(
•ölock
 *
lock
)

88  
lock
->
locked
 &&Üock->
˝u
 == cpu;

89 
	}
}

97 
	$push˛i
()

99 
eÊags
;

101 
eÊags
 = 
	`ªadeÊags
();

102 
	`˛i
();

103 if(
˝u
->
n˛i
++ == 0)

104 
˝u
->
öã«
 = 
eÊags
 & 
FL_IF
;

105 
	}
}

108 
	$p›˛i
()

110 if(
	`ªadeÊags
()&
FL_IF
)

111 
	`∑nic
("popcli - interruptible");

112 if(--
˝u
->
n˛i
 < 0)

113 
	`∑nic
("popcli");

114 if(
˝u
->
n˛i
 =0 && cpu->
öã«
)

115 
	`°i
();

116 
	}
}

	@spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
˝u
 *
	m˝u
;

8 
uöt
 
	mpcs
[10];

	@stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEV
 3

4 

	)

5 
	s°©
 {

6 
	mty≥
;

7 
	mdev
;

8 
uöt
 
	möo
;

9 
	m∆ök
;

10 
uöt
 
	msize
;

	@stressfs.c

10 
	~"ty≥s.h
"

11 
	~"°©.h
"

12 
	~"u£r.h
"

13 
	~"fs.h
"

14 
	~"f˙é.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
(1, "stressfs starting\n");

24 
	`mem£t
(
d©a
, 'a', (data));

26 
i
 = 0; i < 4; i++)

27 if(
	`f‹k
() > 0)

30 
	`¥ötf
(1, "wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
(
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
(
fd
, 
d©a
, (data));

37 
	`˛o£
(
fd
);

39 
	`¥ötf
(1, "read\n");

41 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
(
fd
, 
d©a
, (data));

44 
	`˛o£
(
fd
);

46 
	`waô
();

48 
	`exô
();

49 
	}
}

	@string.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

5 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

7 i‡(()
d°
%4 =0 && 
n
%4 == 0){

8 
c
 &= 0xFF;

9 
	`°o¶
(
d°
, (
c
<<24)|(c<<16)|(c<<8)|c, 
n
/4);

11 
	`°osb
(
d°
, 
c
, 
n
);

12  
d°
;

13 
	}
}

16 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 c⁄° 
uch¨
 *
s1
, *
s2
;

20 
s1
 = 
v1
;

21 
s2
 = 
v2
;

22 
n
-- > 0){

23 if(*
s1
 !*
s2
)

24  *
s1
 - *
s2
;

25 
s1
++, 
s2
++;

29 
	}
}

32 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 c⁄° *
s
;

35 *
d
;

37 
s
 = 
§c
;

38 
d
 = 
d°
;

39 if(
s
 < 
d
 && s + 
n
 > d){

40 
s
 +
n
;

41 
d
 +
n
;

42 
n
-- > 0)

43 *--
d
 = *--
s
;

45 
n
-- > 0)

46 *
d
++ = *
s
++;

48  
d°
;

49 
	}
}

53 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

55  
	`memmove
(
d°
, 
§c
, 
n
);

56 
	}
}

59 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

61 
n
 > 0 && *
p
 && *∞=*
q
)

62 
n
--, 
p
++, 
q
++;

63 if(
n
 == 0)

65  (
uch¨
)*
p
 - (uch¨)*
q
;

66 
	}
}

69 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

71 *
os
;

73 
os
 = 
s
;

74 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

76 
n
-- > 0)

77 *
s
++ = 0;

78  
os
;

79 
	}
}

83 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

85 *
os
;

87 
os
 = 
s
;

88 if(
n
 <= 0)

89  
os
;

90 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

92 *
s
 = 0;

93  
os
;

94 
	}
}

97 
	$°æí
(c⁄° *
s
)

99 
n
;

101 
n
 = 0; 
s
[n];Ç++)

103  
n
;

104 
	}
}

	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"sysˇŒ.h
"

18 
	$„tchöt
(
uöt
 
addr
, *
ù
)

20 if(
addr
 >
¥oc
->
sz
 ||áddr+4 >Öroc->sz)

22 *
ù
 = *(*)(
addr
);

24 
	}
}

30 
	$„tch°r
(
uöt
 
addr
, **
µ
)

32 *
s
, *
ï
;

34 if(
addr
 >
¥oc
->
sz
)

36 *
µ
 = (*)
addr
;

37 
ï
 = (*)
¥oc
->
sz
;

38 
s
 = *
µ
; s < 
ï
; s++)

39 if(*
s
 == 0)

40  
s
 - *
µ
;

42 
	}
}

46 
	$¨göt
(
n
, *
ù
)

48  
	`„tchöt
(
¥oc
->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

49 
	}
}

55 
	$¨g±r
(
n
, **
µ
, 
size
)

57 
i
;

59 if(
	`¨göt
(
n
, &
i
) < 0)

61 if((
uöt
)
i
 >
¥oc
->
sz
 || (uöt)i+
size
 >Öroc->sz)

63 *
µ
 = (*)
i
;

65 
	}
}

72 
	$¨g°r
(
n
, **
µ
)

74 
addr
;

75 if(
	`¨göt
(
n
, &
addr
) < 0)

77  
	`„tch°r
(
addr
, 
µ
);

78 
	}
}

80 
sys_chdú
();

81 
sys_˛o£
();

82 
sys_dup
();

83 
sys_exec
();

84 
sys_exô
();

85 
sys_f‹k
();

86 
sys_f°©
();

87 
sys_gëpid
();

88 
sys_kûl
();

89 
sys_lök
();

90 
sys_mkdú
();

91 
sys_mknod
();

92 
sys_›í
();

93 
sys_pùe
();

94 
sys_ªad
();

95 
sys_sbrk
();

96 
sys_¶ìp
();

97 
sys_u∆ök
();

98 
sys_waô
();

99 
sys_wrôe
();

100 
sys_u±ime
();

101 
sys_kthªad_¸óã
();

102 
sys_kthªad_joö
();

104 (*
sysˇŒs
[])() = {

105 [
SYS_f‹k
] 
sys_f‹k
,

106 [
SYS_exô
] 
sys_exô
,

107 [
SYS_waô
] 
sys_waô
,

108 [
SYS_pùe
] 
sys_pùe
,

109 [
SYS_ªad
] 
sys_ªad
,

110 [
SYS_kûl
] 
sys_kûl
,

111 [
SYS_exec
] 
sys_exec
,

112 [
SYS_f°©
] 
sys_f°©
,

113 [
SYS_chdú
] 
sys_chdú
,

114 [
SYS_dup
] 
sys_dup
,

115 [
SYS_gëpid
] 
sys_gëpid
,

116 [
SYS_sbrk
] 
sys_sbrk
,

117 [
SYS_¶ìp
] 
sys_¶ìp
,

118 [
SYS_u±ime
] 
sys_u±ime
,

119 [
SYS_›í
] 
sys_›í
,

120 [
SYS_wrôe
] 
sys_wrôe
,

121 [
SYS_mknod
] 
sys_mknod
,

122 [
SYS_u∆ök
] 
sys_u∆ök
,

123 [
SYS_lök
] 
sys_lök
,

124 [
SYS_mkdú
] 
sys_mkdú
,

125 [
SYS_˛o£
] 
sys_˛o£
,

126 [
SYS_kthªad_joö
] 
sys_kthªad_joö
,

127 [
SYS_kthªad_¸óã
] 
sys_kthªad_¸óã
,

128 
	}
};

131 
	$sysˇŒ
()

133 
num
;

135 
num
 = 
¥oc
->
tf
->
óx
;

136 if(
num
 > 0 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num]) {

137 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

139 
	`˝rötf
("%d %s: unknown sys call %d\n",

140 
¥oc
->
pid
,Öroc->
«me
, 
num
);

141 
¥oc
->
tf
->
óx
 = -1;

143 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

16 
	#SYS_›í
 15

	)

17 
	#SYS_wrôe
 16

	)

18 
	#SYS_mknod
 17

	)

19 
	#SYS_u∆ök
 18

	)

20 
	#SYS_lök
 19

	)

21 
	#SYS_mkdú
 20

	)

22 
	#SYS_˛o£
 21

	)

23 
	#SYS_kthªad_joö
 22

	)

24 
	#SYS_kthªad_¸óã
 23

	)

	@sysfile.c

7 
	~"ty≥s.h
"

8 
	~"defs.h
"

9 
	~"∑øm.h
"

10 
	~"°©.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"fs.h
"

14 
	~"fûe.h
"

15 
	~"f˙é.h
"

20 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

22 
fd
;

23 
fûe
 *
f
;

25 if(
	`¨göt
(
n
, &
fd
) < 0)

27 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
¥oc
->
ofûe
[fd]) == 0)

29 if(
pfd
)

30 *
pfd
 = 
fd
;

31 if(
pf
)

32 *
pf
 = 
f
;

34 
	}
}

39 
	$fdÆloc
(
fûe
 *
f
)

41 
fd
;

43 
fd
 = 0; fd < 
NOFILE
; fd++){

44 if(
¥oc
->
ofûe
[
fd
] == 0){

45 
¥oc
->
ofûe
[
fd
] = 
f
;

46  
fd
;

50 
	}
}

53 
	$sys_dup
()

55 
fûe
 *
f
;

56 
fd
;

58 if(
	`¨gfd
(0, 0, &
f
) < 0)

60 if((
fd
=
	`fdÆloc
(
f
)) < 0)

62 
	`fûedup
(
f
);

63  
fd
;

64 
	}
}

67 
	$sys_ªad
()

69 
fûe
 *
f
;

70 
n
;

71 *
p
;

73 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

75  
	`fûîód
(
f
, 
p
, 
n
);

76 
	}
}

79 
	$sys_wrôe
()

81 
fûe
 *
f
;

82 
n
;

83 *
p
;

85 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

87  
	`fûewrôe
(
f
, 
p
, 
n
);

88 
	}
}

91 
	$sys_˛o£
()

93 
fd
;

94 
fûe
 *
f
;

96 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

98 
¥oc
->
ofûe
[
fd
] = 0;

99 
	`fûe˛o£
(
f
);

101 
	}
}

104 
	$sys_f°©
()

106 
fûe
 *
f
;

107 
°©
 *
°
;

109 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨g±r
(1, (*)&
°
, (*st)) < 0)

111  
	`fûe°©
(
f
, 
°
);

112 
	}
}

116 
	$sys_lök
()

118 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

119 
öode
 *
dp
, *
ù
;

121 if(
	`¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

124 
	`begö_›
();

125 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0){

126 
	`íd_›
();

130 
	`ûock
(
ù
);

131 if(
ù
->
ty≥
 =
T_DIR
){

132 
	`iu∆ockput
(
ù
);

133 
	`íd_›
();

137 
ù
->
∆ök
++;

138 
	`iupd©e
(
ù
);

139 
	`iu∆ock
(
ù
);

141 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

142 
bad
;

143 
	`ûock
(
dp
);

144 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0){

145 
	`iu∆ockput
(
dp
);

146 
bad
;

148 
	`iu∆ockput
(
dp
);

149 
	`ùut
(
ù
);

151 
	`íd_›
();

155 
bad
:

156 
	`ûock
(
ù
);

157 
ù
->
∆ök
--;

158 
	`iupd©e
(
ù
);

159 
	`iu∆ockput
(
ù
);

160 
	`íd_›
();

162 
	}
}

166 
	$isdúem±y
(
öode
 *
dp
)

168 
off
;

169 
dúít
 
de
;

171 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

172 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

173 
	`∑nic
("isdirempty:Ñeadi");

174 if(
de
.
öum
 != 0)

178 
	}
}

182 
	$sys_u∆ök
()

184 
öode
 *
ù
, *
dp
;

185 
dúít
 
de
;

186 
«me
[
DIRSIZ
], *
∑th
;

187 
uöt
 
off
;

189 if(
	`¨g°r
(0, &
∑th
) < 0)

192 
	`begö_›
();

193 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0){

194 
	`íd_›
();

198 
	`ûock
(
dp
);

201 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0)

202 
bad
;

204 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0)

205 
bad
;

206 
	`ûock
(
ù
);

208 if(
ù
->
∆ök
 < 1)

209 
	`∑nic
("unlink:Çlink < 1");

210 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

211 
	`iu∆ockput
(
ù
);

212 
bad
;

215 
	`mem£t
(&
de
, 0, (de));

216 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

217 
	`∑nic
("unlink: writei");

218 if(
ù
->
ty≥
 =
T_DIR
){

219 
dp
->
∆ök
--;

220 
	`iupd©e
(
dp
);

222 
	`iu∆ockput
(
dp
);

224 
ù
->
∆ök
--;

225 
	`iupd©e
(
ù
);

226 
	`iu∆ockput
(
ù
);

228 
	`íd_›
();

232 
bad
:

233 
	`iu∆ockput
(
dp
);

234 
	`íd_›
();

236 
	}
}

238 
öode
*

239 
	$¸óã
(*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

241 
uöt
 
off
;

242 
öode
 *
ù
, *
dp
;

243 
«me
[
DIRSIZ
];

245 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

247 
	`ûock
(
dp
);

249 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) != 0){

250 
	`iu∆ockput
(
dp
);

251 
	`ûock
(
ù
);

252 if(
ty≥
 =
T_FILE
 && 
ù
->type == T_FILE)

253  
ù
;

254 
	`iu∆ockput
(
ù
);

258 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0)

259 
	`∑nic
("create: ialloc");

261 
	`ûock
(
ù
);

262 
ù
->
maj‹
 = major;

263 
ù
->
mö‹
 = minor;

264 
ù
->
∆ök
 = 1;

265 
	`iupd©e
(
ù
);

267 if(
ty≥
 =
T_DIR
){

268 
dp
->
∆ök
++;

269 
	`iupd©e
(
dp
);

271 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

272 
	`∑nic
("create dots");

275 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0)

276 
	`∑nic
("create: dirlink");

278 
	`iu∆ockput
(
dp
);

280  
ù
;

281 
	}
}

284 
	$sys_›í
()

286 *
∑th
;

287 
fd
, 
omode
;

288 
fûe
 *
f
;

289 
öode
 *
ù
;

291 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

294 
	`begö_›
();

296 if(
omode
 & 
O_CREATE
){

297 
ù
 = 
	`¸óã
(
∑th
, 
T_FILE
, 0, 0);

298 if(
ù
 == 0){

299 
	`íd_›
();

303 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

304 
	`íd_›
();

307 
	`ûock
(
ù
);

308 if(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
){

309 
	`iu∆ockput
(
ù
);

310 
	`íd_›
();

315 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

316 if(
f
)

317 
	`fûe˛o£
(
f
);

318 
	`iu∆ockput
(
ù
);

319 
	`íd_›
();

322 
	`iu∆ock
(
ù
);

323 
	`íd_›
();

325 
f
->
ty≥
 = 
FD_INODE
;

326 
f
->
ù
 = ip;

327 
f
->
off
 = 0;

328 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

329 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

330  
fd
;

331 
	}
}

334 
	$sys_mkdú
()

336 *
∑th
;

337 
öode
 *
ù
;

339 
	`begö_›
();

340 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 
T_DIR
, 0, 0)) == 0){

341 
	`íd_›
();

344 
	`iu∆ockput
(
ù
);

345 
	`íd_›
();

347 
	}
}

350 
	$sys_mknod
()

352 
öode
 *
ù
;

353 *
∑th
;

354 
Àn
;

355 
maj‹
, 
mö‹
;

357 
	`begö_›
();

358 if((
Àn
=
	`¨g°r
(0, &
∑th
)) < 0 ||

359 
	`¨göt
(1, &
maj‹
) < 0 ||

360 
	`¨göt
(2, &
mö‹
) < 0 ||

361 (
ù
 = 
	`¸óã
(
∑th
, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0){

362 
	`íd_›
();

365 
	`iu∆ockput
(
ù
);

366 
	`íd_›
();

368 
	}
}

371 
	$sys_chdú
()

373 *
∑th
;

374 
öode
 *
ù
;

376 
	`begö_›
();

377 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0){

378 
	`íd_›
();

381 
	`ûock
(
ù
);

382 if(
ù
->
ty≥
 !
T_DIR
){

383 
	`iu∆ockput
(
ù
);

384 
	`íd_›
();

387 
	`iu∆ock
(
ù
);

388 
	`ùut
(
¥oc
->
cwd
);

389 
	`íd_›
();

390 
¥oc
->
cwd
 = 
ù
;

392 
	}
}

395 
	$sys_exec
()

397 *
∑th
, *
¨gv
[
MAXARG
];

398 
i
;

399 
uöt
 
u¨gv
, 
u¨g
;

401 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, (*)&
u¨gv
) < 0){

404 
	`mem£t
(
¨gv
, 0, (argv));

405 
i
=0;; i++){

406 if(
i
 >
	`NELEM
(
¨gv
))

408 if(
	`„tchöt
(
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

410 if(
u¨g
 == 0){

411 
¨gv
[
i
] = 0;

414 if(
	`„tch°r
(
u¨g
, &
¨gv
[
i
]) < 0)

417  
	`exec
(
∑th
, 
¨gv
);

418 
	}
}

421 
	$sys_pùe
()

423 *
fd
;

424 
fûe
 *
rf
, *
wf
;

425 
fd0
, 
fd1
;

427 if(
	`¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

429 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

431 
fd0
 = -1;

432 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

433 if(
fd0
 >= 0)

434 
¥oc
->
ofûe
[
fd0
] = 0;

435 
	`fûe˛o£
(
rf
);

436 
	`fûe˛o£
(
wf
);

439 
fd
[0] = 
fd0
;

440 
fd
[1] = 
fd1
;

442 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

10 
	$sys_f‹k
()

12 
¥oc
->
˘Êag
 = 0;

13  
	`f‹k
((*)0, 0, 0, 0);

14 
	}
}

17 
	$sys_exô
()

19 
	`exô
();

21 
	}
}

24 
	$sys_waô
()

26  
	`waô
(0);

27 
	}
}

30 
	$sys_kûl
()

32 
pid
;

34 if(
	`¨göt
(0, &
pid
) < 0)

36  
	`kûl
(
pid
);

37 
	}
}

40 
	$sys_gëpid
()

42  
¥oc
->
pid
;

43 
	}
}

46 
	$sys_sbrk
()

48 
addr
;

49 
n
;

51 if(
	`¨göt
(0, &
n
) < 0)

53 
addr
 = 
¥oc
->
sz
;

54 if(
	`grow¥oc
(
n
) < 0)

56  
addr
;

57 
	}
}

60 
	$sys_¶ìp
()

62 
n
;

63 
uöt
 
ticks0
;

65 if(
	`¨göt
(0, &
n
) < 0)

67 
	`acquúe
(&
tick¶ock
);

68 
ticks0
 = 
ticks
;

69 
ticks
 - 
ticks0
 < 
n
){

70 if(
¥oc
->
kûÀd
){

71 
	`ªÀa£
(&
tick¶ock
);

74 
	`¶ìp
(&
ticks
, &
tick¶ock
);

76 
	`ªÀa£
(&
tick¶ock
);

78 
	}
}

83 
	$sys_u±ime
()

85 
uöt
 
xticks
;

87 
	`acquúe
(&
tick¶ock
);

88 
xticks
 = 
ticks
;

89 
	`ªÀa£
(&
tick¶ock
);

90  
xticks
;

91 
	}
}

93 
	$sys_gëµid
() {

95 if(
¥oc
->
∑ª¡
 == 0)

97  
¥oc
->
∑ª¡
->
pid
;

98 
	}
}

100 
	$sys_kthªad_¸óã
(){

102 
u°ack
 = 0;

103 
wøµî
 = 0;

104 
¨g1
 = 0;

105 
¨g2
 = 0;

107 
	`¨göt
(0, &
u°ack
);

108 
	`¨göt
(1, &
wøµî
);

109 
	`¨göt
(2, &
¨g1
);

110 
	`¨göt
(3, &
¨g2
);

112 
¥oc
->
˘Êag
 = 1;

113  
	`f‹k
((*)
u°ack
, (
uöt
)
wøµî
, (uöt)
¨g1
, (uöt)
¨g2
);

114 
	}
}

116 
	$sys_kthªad_joö
(){

118 
tid
 = 0;

119 
	`¨göt
(0, &
tid
);

120  
	`waô
(
tid
);

122 
	}
}

	@testct.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"qthªad.h
"

6 
	#MAX_THREADS
 10

	)

16 *
f1
(*
¨g
);

18 
	#THREADSTACKSIZE
 4096

	)

20 
	$ã°1
(){

22 
qthªad_t
 
t
[
MAX_THREADS
];

24 
i
,
j
;

26 
i
 = 0; i < 
MAX_THREADS
; i++){

27 
tid
 = 
	`qthªad_¸óã
(&
t
[
i
], 
f1
, (*)&i);

28 
	`¥ötf
(1, "[%d : %d]\n", 
tid
, 
t
[
i
]->tid);

31 
i
 = 0; i < 
MAX_THREADS
; i++){

32 
	`¥ötf
(1, "%d\n", 
t
[
i
]->
tid
);

35 
i
 = 0; i < 
MAX_THREADS
; i++) {

36 
	`qthªad_joö
(
t
[
i
], (**)&
j
);

41 
	}
}

88 
	$maö
(){

90 
	`ã°1
();

91 
	`exô
();

93 
	}
}

95 *
	$f1
(*
¨g
) {

98  
¨g
;

99 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timîöô
()

28 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

30 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

31 
	`pi˚«bÀ
(
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

12 
g©edesc
 
	gidt
[256];

13 
uöt
 
ve˘‹s
[];

14 
•ölock
 
	gtick¶ock
;

15 
uöt
 
	gticks
;

18 
	$tvöô
()

20 
i
;

22 
i
 = 0; i < 256; i++)

23 
	`SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

24 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

26 
	`öôlock
(&
tick¶ock
, "time");

27 
	}
}

30 
	$idtöô
()

32 
	`lidt
(
idt
, (idt));

33 
	}
}

37 
	$å≠
(
å≠‰ame
 *
tf
)

39 if(
tf
->
å≠no
 =
T_SYSCALL
){

40 if(
¥oc
->
kûÀd
)

41 
	`exô
();

42 
¥oc
->
tf
 =Åf;

43 
	`sysˇŒ
();

44 if(
¥oc
->
kûÀd
)

45 
	`exô
();

49 
tf
->
å≠no
){

50 
T_IRQ0
 + 
IRQ_TIMER
:

51 if(
˝u
->
id
 == 0){

52 
	`acquúe
(&
tick¶ock
);

53 
ticks
++;

54 
	`wakeup
(&
ticks
);

55 
	`ªÀa£
(&
tick¶ock
);

57 
	`œpi˚oi
();

59 
T_IRQ0
 + 
IRQ_IDE
:

60 
	`ideöå
();

61 
	`œpi˚oi
();

63 
T_IRQ0
 + 
IRQ_IDE
+1:

66 
T_IRQ0
 + 
IRQ_KBD
:

67 
	`kbdöå
();

68 
	`œpi˚oi
();

70 
T_IRQ0
 + 
IRQ_COM1
:

71 
	`u¨töå
();

72 
	`œpi˚oi
();

74 
T_IRQ0
 + 7:

75 
T_IRQ0
 + 
IRQ_SPURIOUS
:

76 
	`˝rötf
("cpu%d: spurious interruptát %x:%x\n",

77 
˝u
->
id
, 
tf
->
cs
,Åf->
eù
);

78 
	`œpi˚oi
();

83 if(
¥oc
 =0 || (
tf
->
cs
&3) == 0){

85 
	`˝rötf
("unexpectedÅrap %d from cpu %dÉip %x (cr2=0x%x)\n",

86 
tf
->
å≠no
, 
˝u
->
id
,Åf->
eù
, 
	`r¸2
());

87 
	`∑nic
("trap");

90 
	`˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %d "

92 
¥oc
->
pid
,Öroc->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
->
id
,Åf->
eù
,

93 
	`r¸2
());

94 
¥oc
->
kûÀd
 = 1;

100 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

101 
	`exô
();

105 if(
¥oc
 &&Öroc->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
T_IRQ0
+
IRQ_TIMER
)

106 
	`yõld
();

109 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

110 
	`exô
();

111 
	}
}

	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 64

28 
	#T_DEFAULT
 500

29 

	)

30 
	#T_IRQ0
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_COM1
 4

	)

35 
	#IRQ_IDE
 14

	)

36 
	#IRQ_ERROR
 19

	)

37 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

4 
uöt
 
	tpde_t
;

	@uart.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"å≠s.h
"

7 
	~"•ölock.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

12 
	~"x86.h
"

14 
	#COM1
 0x3f8

	)

16 
	gu¨t
;

19 
	$u¨töô
()

21 *
p
;

24 
	`outb
(
COM1
+2, 0);

27 
	`outb
(
COM1
+3, 0x80);

28 
	`outb
(
COM1
+0, 115200/9600);

29 
	`outb
(
COM1
+1, 0);

30 
	`outb
(
COM1
+3, 0x03);

31 
	`outb
(
COM1
+4, 0);

32 
	`outb
(
COM1
+1, 0x01);

35 if(
	`öb
(
COM1
+5) == 0xFF)

37 
u¨t
 = 1;

41 
	`öb
(
COM1
+2);

42 
	`öb
(
COM1
+0);

43 
	`pi˚«bÀ
(
IRQ_COM1
);

44 
	`iﬂpi˚«bÀ
(
IRQ_COM1
, 0);

47 
p
="xv6...\n"; *p;Ö++)

48 
	`u¨çutc
(*
p
);

49 
	}
}

52 
	$u¨çutc
(
c
)

54 
i
;

56 if(!
u¨t
)

58 
i
 = 0; i < 128 && !(
	`öb
(
COM1
+5) & 0x20); i++)

59 
	`mi¸odñay
(10);

60 
	`outb
(
COM1
+0, 
c
);

61 
	}
}

64 
	$u¨tgëc
()

66 if(!
u¨t
)

68 if(!(
	`öb
(
COM1
+5) & 0x01))

70  
	`öb
(
COM1
+0);

71 
	}
}

74 
	$u¨töå
()

76 
	`c⁄sﬁeöå
(
u¨tgëc
);

77 
	}
}

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

5 
	~"x86.h
"

8 
	$°r˝y
(*
s
, *
t
)

10 *
os
;

12 
os
 = 
s
;

13 (*
s
++ = *
t
++) != 0)

15  
os
;

16 
	}
}

19 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

21 *
p
 && *∞=*
q
)

22 
p
++, 
q
++;

23  (
uch¨
)*
p
 - (uch¨)*
q
;

24 
	}
}

26 
uöt


27 
	$°æí
(*
s
)

29 
n
;

31 
n
 = 0; 
s
[n];Ç++)

33  
n
;

34 
	}
}

37 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

39 
	`°osb
(
d°
, 
c
, 
n
);

40  
d°
;

41 
	}
}

44 
	$°rchr
(c⁄° *
s
, 
c
)

46 ; *
s
; s++)

47 if(*
s
 =
c
)

48  (*)
s
;

50 
	}
}

53 
	$gës
(*
buf
, 
max
)

55 
i
, 
cc
;

56 
c
;

58 
i
=0; i+1 < 
max
; ){

59 
cc
 = 
	`ªad
(0, &
c
, 1);

60 if(
cc
 < 1)

62 
buf
[
i
++] = 
c
;

63 if(
c
 == '\n' || c == '\r')

66 
buf
[
i
] = '\0';

67  
buf
;

68 
	}
}

71 
	$°©
(*
n
, 
°©
 *
°
)

73 
fd
;

74 
r
;

76 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

77 if(
fd
 < 0)

79 
r
 = 
	`f°©
(
fd
, 
°
);

80 
	`˛o£
(
fd
);

81  
r
;

82 
	}
}

85 
	$©oi
(c⁄° *
s
)

87 
n
;

89 
n
 = 0;

90 '0' <*
s
 && *s <= '9')

91 
n
 =Ç*10 + *
s
++ - '0';

92  
n
;

93 
	}
}

96 
	$memmove
(*
vd°
, *
v§c
, 
n
)

98 *
d°
, *
§c
;

100 
d°
 = 
vd°
;

101 
§c
 = 
v§c
;

102 
n
-- > 0)

103 *
d°
++ = *
§c
++;

104  
vd°
;

105 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*)
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 4096)

53 
nu
 = 4096;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*)-1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*)(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user.h

1 
	g°©
;

4 
f‹k
();

5 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

6 
	`waô
();

7 
	`pùe
(*);

8 
	`wrôe
(, *, );

9 
	`ªad
(, *, );

10 
	`˛o£
();

11 
	`kûl
();

12 
	`exec
(*, **);

13 
	`›í
(*, );

14 
	`mknod
(*, , );

15 
	`u∆ök
(*);

16 
	`f°©
(
fd
, 
°©
*);

17 
	`lök
(*, *);

18 
	`mkdú
(*);

19 
	`chdú
(*);

20 
	`dup
();

21 
	`gëpid
();

22 * 
	`sbrk
();

23 
	`¶ìp
();

24 
	`u±ime
();

25 
	`kthªad_¸óã
(, , , );

26 
	`kthªad_joö
(, );

29 
	`°©
(*, 
°©
*);

30 * 
	`°r˝y
(*, *);

31 *
	`memmove
(*, *, );

32 * 
	`°rchr
(c⁄° *, 
c
);

33 
	`°rcmp
(const *, const *);

34 
	`¥ötf
(, *, ...);

35 * 
	`gës
(*, 
max
);

36 
uöt
 
	`°æí
(*);

37 * 
	`mem£t
(*, , 
uöt
);

38 * 
	`mÆloc
(
uöt
);

39 
	`‰ì
(*);

40 
	`©oi
(const *);

	@usertests.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"°©.h
"

4 
	~"u£r.h
"

5 
	~"fs.h
"

6 
	~"f˙é.h
"

7 
	~"sysˇŒ.h
"

8 
	~"å≠s.h
"

9 
	~"memœyout.h
"

11 
	gbuf
[8192];

12 
	g«me
[3];

13 *
	gechﬂrgv
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

14 
	g°dout
 = 1;

18 
	$ùuâe°
()

20 
	`¥ötf
(
°dout
, "iputÅest\n");

22 if(
	`mkdú
("iputdir") < 0){

23 
	`¥ötf
(
°dout
, "mkdir failed\n");

24 
	`exô
();

26 if(
	`chdú
("iputdir") < 0){

27 
	`¥ötf
(
°dout
, "chdir iputdir failed\n");

28 
	`exô
();

30 if(
	`u∆ök
("../iputdir") < 0){

31 
	`¥ötf
(
°dout
, "unlink ../iputdir failed\n");

32 
	`exô
();

34 if(
	`chdú
("/") < 0){

35 
	`¥ötf
(
°dout
, "chdir / failed\n");

36 
	`exô
();

38 
	`¥ötf
(
°dout
, "iputÅest ok\n");

39 
	}
}

43 
	$exôùuâe°
()

45 
pid
;

47 
	`¥ötf
(
°dout
, "exitiputÅest\n");

49 
pid
 = 
	`f‹k
();

50 if(
pid
 < 0){

51 
	`¥ötf
(
°dout
, "fork failed\n");

52 
	`exô
();

54 if(
pid
 == 0){

55 if(
	`mkdú
("iputdir") < 0){

56 
	`¥ötf
(
°dout
, "mkdir failed\n");

57 
	`exô
();

59 if(
	`chdú
("iputdir") < 0){

60 
	`¥ötf
(
°dout
, "child chdir failed\n");

61 
	`exô
();

63 if(
	`u∆ök
("../iputdir") < 0){

64 
	`¥ötf
(
°dout
, "unlink ../iputdir failed\n");

65 
	`exô
();

67 
	`exô
();

69 
	`waô
();

70 
	`¥ötf
(
°dout
, "exitiputÅest ok\n");

71 
	}
}

85 
	$›íùuâe°
()

87 
pid
;

89 
	`¥ötf
(
°dout
, "openiputÅest\n");

90 if(
	`mkdú
("oidir") < 0){

91 
	`¥ötf
(
°dout
, "mkdir oidir failed\n");

92 
	`exô
();

94 
pid
 = 
	`f‹k
();

95 if(
pid
 < 0){

96 
	`¥ötf
(
°dout
, "fork failed\n");

97 
	`exô
();

99 if(
pid
 == 0){

100 
fd
 = 
	`›í
("oidú", 
O_RDWR
);

101 if(
fd
 >= 0){

102 
	`¥ötf
(
°dout
, "open directory for write succeeded\n");

103 
	`exô
();

105 
	`exô
();

107 
	`¶ìp
(1);

108 if(
	`u∆ök
("oidir") != 0){

109 
	`¥ötf
(
°dout
, "unlink failed\n");

110 
	`exô
();

112 
	`waô
();

113 
	`¥ötf
(
°dout
, "openiputÅest ok\n");

114 
	}
}

119 
	$›íã°
()

121 
fd
;

123 
	`¥ötf
(
°dout
, "openÅest\n");

124 
fd
 = 
	`›í
("echo", 0);

125 if(
fd
 < 0){

126 
	`¥ötf
(
°dout
, "openÉcho failed!\n");

127 
	`exô
();

129 
	`˛o£
(
fd
);

130 
fd
 = 
	`›í
("doesnotexist", 0);

131 if(
fd
 >= 0){

132 
	`¥ötf
(
°dout
, "open doesnotexist succeeded!\n");

133 
	`exô
();

135 
	`¥ötf
(
°dout
, "openÅest ok\n");

136 
	}
}

139 
	$wrôëe°
()

141 
fd
;

142 
i
;

144 
	`¥ötf
(
°dout
, "small fileÅest\n");

145 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

146 if(
fd
 >= 0){

147 
	`¥ötf
(
°dout
, "creat small succeeded; ok\n");

149 
	`¥ötf
(
°dout
, "error: creat small failed!\n");

150 
	`exô
();

152 
i
 = 0; i < 100; i++){

153 if(
	`wrôe
(
fd
, "aaaaaaaaaa", 10) != 10){

154 
	`¥ötf
(
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

155 
	`exô
();

157 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 10) != 10){

158 
	`¥ötf
(
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

159 
	`exô
();

162 
	`¥ötf
(
°dout
, "writes ok\n");

163 
	`˛o£
(
fd
);

164 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

165 if(
fd
 >= 0){

166 
	`¥ötf
(
°dout
, "open small succeeded ok\n");

168 
	`¥ötf
(
°dout
, "error: open small failed!\n");

169 
	`exô
();

171 
i
 = 
	`ªad
(
fd
, 
buf
, 2000);

172 if(
i
 == 2000){

173 
	`¥ötf
(
°dout
, "read succeeded ok\n");

175 
	`¥ötf
(
°dout
, "read failed\n");

176 
	`exô
();

178 
	`˛o£
(
fd
);

180 if(
	`u∆ök
("small") < 0){

181 
	`¥ötf
(
°dout
, "unlink small failed\n");

182 
	`exô
();

184 
	`¥ötf
(
°dout
, "small fileÅest ok\n");

185 
	}
}

188 
	$wrôëe°1
()

190 
i
, 
fd
, 
n
;

192 
	`¥ötf
(
°dout
, "big filesÅest\n");

194 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

195 if(
fd
 < 0){

196 
	`¥ötf
(
°dout
, "error: creat big failed!\n");

197 
	`exô
();

200 
i
 = 0; i < 
MAXFILE
; i++){

201 ((*)
buf
)[0] = 
i
;

202 if(
	`wrôe
(
fd
, 
buf
, 512) != 512){

203 
	`¥ötf
(
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

204 
	`exô
();

208 
	`˛o£
(
fd
);

210 
fd
 = 
	`›í
("big", 
O_RDONLY
);

211 if(
fd
 < 0){

212 
	`¥ötf
(
°dout
, "error: open big failed!\n");

213 
	`exô
();

216 
n
 = 0;

218 
i
 = 
	`ªad
(
fd
, 
buf
, 512);

219 if(
i
 == 0){

220 if(
n
 =
MAXFILE
 - 1){

221 
	`¥ötf
(
°dout
, "ªad o∆y %d block†‰om big", 
n
);

222 
	`exô
();

225 } if(
i
 != 512){

226 
	`¥ötf
(
°dout
, "ªad faûed %d\n", 
i
);

227 
	`exô
();

229 if(((*)
buf
)[0] !
n
){

230 
	`¥ötf
(
°dout
, "read content of block %d is %d\n",

231 
n
, ((*)
buf
)[0]);

232 
	`exô
();

234 
n
++;

236 
	`˛o£
(
fd
);

237 if(
	`u∆ök
("big") < 0){

238 
	`¥ötf
(
°dout
, "unlink big failed\n");

239 
	`exô
();

241 
	`¥ötf
(
°dout
, "big files ok\n");

242 
	}
}

245 
	$¸óãã°
()

247 
i
, 
fd
;

249 
	`¥ötf
(
°dout
, "many creates, followed by unlinkÅest\n");

251 
«me
[0] = 'a';

252 
«me
[2] = '\0';

253 
i
 = 0; i < 52; i++){

254 
«me
[1] = '0' + 
i
;

255 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

256 
	`˛o£
(
fd
);

258 
«me
[0] = 'a';

259 
«me
[2] = '\0';

260 
i
 = 0; i < 52; i++){

261 
«me
[1] = '0' + 
i
;

262 
	`u∆ök
(
«me
);

264 
	`¥ötf
(
°dout
, "many creates, followed by unlink; ok\n");

265 
	}
}

267 
	$dúã°
()

269 
	`¥ötf
(
°dout
, "mkdirÅest\n");

271 if(
	`mkdú
("dir0") < 0){

272 
	`¥ötf
(
°dout
, "mkdir failed\n");

273 
	`exô
();

276 if(
	`chdú
("dir0") < 0){

277 
	`¥ötf
(
°dout
, "chdir dir0 failed\n");

278 
	`exô
();

281 if(
	`chdú
("..") < 0){

282 
	`¥ötf
(
°dout
, "chdir .. failed\n");

283 
	`exô
();

286 if(
	`u∆ök
("dir0") < 0){

287 
	`¥ötf
(
°dout
, "unlink dir0 failed\n");

288 
	`exô
();

290 
	`¥ötf
(
°dout
, "mkdirÅest ok\n");

291 
	}
}

294 
	$exe˘e°
()

296 
	`¥ötf
(
°dout
, "execÅest\n");

297 if(
	`exec
("echo", 
echﬂrgv
) < 0){

298 
	`¥ötf
(
°dout
, "execÉcho failed\n");

299 
	`exô
();

301 
	}
}

306 
	$pùe1
()

308 
fds
[2], 
pid
;

309 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

311 if(
	`pùe
(
fds
) != 0){

312 
	`¥ötf
(1, "pipe() failed\n");

313 
	`exô
();

315 
pid
 = 
	`f‹k
();

316 
£q
 = 0;

317 if(
pid
 == 0){

318 
	`˛o£
(
fds
[0]);

319 
n
 = 0;Ç < 5;Ç++){

320 
i
 = 0; i < 1033; i++)

321 
buf
[
i
] = 
£q
++;

322 if(
	`wrôe
(
fds
[1], 
buf
, 1033) != 1033){

323 
	`¥ötf
(1, "pipe1 oops 1\n");

324 
	`exô
();

327 
	`exô
();

328 } if(
pid
 > 0){

329 
	`˛o£
(
fds
[1]);

330 
tŸÆ
 = 0;

331 
cc
 = 1;

332 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

333 
i
 = 0; i < 
n
; i++){

334 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

335 
	`¥ötf
(1, "pipe1 oops 2\n");

339 
tŸÆ
 +
n
;

340 
cc
 = cc * 2;

341 if(
cc
 > (
buf
))

342 
cc
 = (
buf
);

344 if(
tŸÆ
 != 5 * 1033){

345 
	`¥ötf
(1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

346 
	`exô
();

348 
	`˛o£
(
fds
[0]);

349 
	`waô
();

351 
	`¥ötf
(1, "fork() failed\n");

352 
	`exô
();

354 
	`¥ötf
(1, "pipe1 ok\n");

355 
	}
}

359 
	$¥ìm±
()

361 
pid1
, 
pid2
, 
pid3
;

362 
pfds
[2];

364 
	`¥ötf
(1, "preempt: ");

365 
pid1
 = 
	`f‹k
();

366 if(
pid1
 == 0)

370 
pid2
 = 
	`f‹k
();

371 if(
pid2
 == 0)

375 
	`pùe
(
pfds
);

376 
pid3
 = 
	`f‹k
();

377 if(
pid3
 == 0){

378 
	`˛o£
(
pfds
[0]);

379 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

380 
	`¥ötf
(1, "preempt writeÉrror");

381 
	`˛o£
(
pfds
[1]);

386 
	`˛o£
(
pfds
[1]);

387 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

388 
	`¥ötf
(1, "preemptÑeadÉrror");

391 
	`˛o£
(
pfds
[0]);

392 
	`¥ötf
(1, "kill... ");

393 
	`kûl
(
pid1
);

394 
	`kûl
(
pid2
);

395 
	`kûl
(
pid3
);

396 
	`¥ötf
(1, "wait... ");

397 
	`waô
();

398 
	`waô
();

399 
	`waô
();

400 
	`¥ötf
(1, "preempt ok\n");

401 
	}
}

405 
	$exôwaô
()

407 
i
, 
pid
;

409 
i
 = 0; i < 100; i++){

410 
pid
 = 
	`f‹k
();

411 if(
pid
 < 0){

412 
	`¥ötf
(1, "fork failed\n");

415 if(
pid
){

416 if(
	`waô
(Ë!
pid
){

417 
	`¥ötf
(1, "wait wrongÖid\n");

421 
	`exô
();

424 
	`¥ötf
(1, "exitwait ok\n");

425 
	}
}

428 
	$mem
()

430 *
m1
, *
m2
;

431 
pid
, 
µid
;

433 
	`¥ötf
(1, "memÅest\n");

434 
µid
 = 
	`gëpid
();

435 if((
pid
 = 
	`f‹k
()) == 0){

436 
m1
 = 0;

437 (
m2
 = 
	`mÆloc
(10001)) != 0){

438 *(**)
m2
 = 
m1
;

439 
m1
 = 
m2
;

441 
m1
){

442 
m2
 = *(**)
m1
;

443 
	`‰ì
(
m1
);

444 
m1
 = 
m2
;

446 
m1
 = 
	`mÆloc
(1024*20);

447 if(
m1
 == 0){

448 
	`¥ötf
(1, "couldn'tállocate mem?!!\n");

449 
	`kûl
(
µid
);

450 
	`exô
();

452 
	`‰ì
(
m1
);

453 
	`¥ötf
(1, "mem ok\n");

454 
	`exô
();

456 
	`waô
();

458 
	}
}

465 
	$sh¨edfd
()

467 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

468 
buf
[10];

470 
	`¥ötf
(1, "sharedfdÅest\n");

472 
	`u∆ök
("sharedfd");

473 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

474 if(
fd
 < 0){

475 
	`¥ötf
(1, "fstests: cannot open sharedfd for writing");

478 
pid
 = 
	`f‹k
();

479 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

480 
i
 = 0; i < 1000; i++){

481 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

482 
	`¥ötf
(1, "fstests: write sharedfd failed\n");

486 if(
pid
 == 0)

487 
	`exô
();

489 
	`waô
();

490 
	`˛o£
(
fd
);

491 
fd
 = 
	`›í
("sharedfd", 0);

492 if(
fd
 < 0){

493 
	`¥ötf
(1, "fstests: cannot open sharedfd forÑeading\n");

496 
nc
 = 
≈
 = 0;

497 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

498 
i
 = 0; i < (
buf
); i++){

499 if(
buf
[
i
] == 'c')

500 
nc
++;

501 if(
buf
[
i
] == 'p')

502 
≈
++;

505 
	`˛o£
(
fd
);

506 
	`u∆ök
("sharedfd");

507 if(
nc
 =10000 && 
≈
 == 10000){

508 
	`¥ötf
(1, "sharedfd ok\n");

510 
	`¥ötf
(1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

511 
	`exô
();

513 
	}
}

518 
	$fourfûes
()

520 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
, 
pi
;

521 *
«mes
[] = { "f0", "f1", "f2", "f3" };

522 *
‚ame
;

524 
	`¥ötf
(1, "fourfilesÅest\n");

526 
pi
 = 0;Öi < 4;Öi++){

527 
‚ame
 = 
«mes
[
pi
];

528 
	`u∆ök
(
‚ame
);

530 
pid
 = 
	`f‹k
();

531 if(
pid
 < 0){

532 
	`¥ötf
(1, "fork failed\n");

533 
	`exô
();

536 if(
pid
 == 0){

537 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

538 if(
fd
 < 0){

539 
	`¥ötf
(1, "create failed\n");

540 
	`exô
();

543 
	`mem£t
(
buf
, '0'+
pi
, 512);

544 
i
 = 0; i < 12; i++){

545 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 500)) != 500){

546 
	`¥ötf
(1, "wrôêÁûed %d\n", 
n
);

547 
	`exô
();

550 
	`exô
();

554 
pi
 = 0;Öi < 4;Öi++){

555 
	`waô
();

558 
i
 = 0; i < 2; i++){

559 
‚ame
 = 
«mes
[
i
];

560 
fd
 = 
	`›í
(
‚ame
, 0);

561 
tŸÆ
 = 0;

562 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

563 
j
 = 0; j < 
n
; j++){

564 if(
buf
[
j
] !'0'+
i
){

565 
	`¥ötf
(1, "wrong char\n");

566 
	`exô
();

569 
tŸÆ
 +
n
;

571 
	`˛o£
(
fd
);

572 if(
tŸÆ
 != 12*500){

573 
	`¥ötf
(1, "wr⁄gÜígth %d\n", 
tŸÆ
);

574 
	`exô
();

576 
	`u∆ök
(
‚ame
);

579 
	`¥ötf
(1, "fourfiles ok\n");

580 
	}
}

584 
	$¸óãdñëe
()

586 íum { 
N
 = 20 };

587 
pid
, 
i
, 
fd
, 
pi
;

588 
«me
[32];

590 
	`¥ötf
(1, "createdeleteÅest\n");

592 
pi
 = 0;Öi < 4;Öi++){

593 
pid
 = 
	`f‹k
();

594 if(
pid
 < 0){

595 
	`¥ötf
(1, "fork failed\n");

596 
	`exô
();

599 if(
pid
 == 0){

600 
«me
[0] = 'p' + 
pi
;

601 
«me
[2] = '\0';

602 
i
 = 0; i < 
N
; i++){

603 
«me
[1] = '0' + 
i
;

604 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

605 if(
fd
 < 0){

606 
	`¥ötf
(1, "create failed\n");

607 
	`exô
();

609 
	`˛o£
(
fd
);

610 if(
i
 > 0 && (i % 2 ) == 0){

611 
«me
[1] = '0' + (
i
 / 2);

612 if(
	`u∆ök
(
«me
) < 0){

613 
	`¥ötf
(1, "unlink failed\n");

614 
	`exô
();

618 
	`exô
();

622 
pi
 = 0;Öi < 4;Öi++){

623 
	`waô
();

626 
«me
[0] =Çame[1] =Çame[2] = 0;

627 
i
 = 0; i < 
N
; i++){

628 
pi
 = 0;Öi < 4;Öi++){

629 
«me
[0] = 'p' + 
pi
;

630 
«me
[1] = '0' + 
i
;

631 
fd
 = 
	`›í
(
«me
, 0);

632 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

633 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

634 
	`exô
();

635 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

636 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

637 
	`exô
();

639 if(
fd
 >= 0)

640 
	`˛o£
(
fd
);

644 
i
 = 0; i < 
N
; i++){

645 
pi
 = 0;Öi < 4;Öi++){

646 
«me
[0] = 'p' + 
i
;

647 
«me
[1] = '0' + 
i
;

648 
	`u∆ök
(
«me
);

652 
	`¥ötf
(1, "createdelete ok\n");

653 
	}
}

657 
	$u∆ökªad
()

659 
fd
, 
fd1
;

661 
	`¥ötf
(1, "unlinkreadÅest\n");

662 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

663 if(
fd
 < 0){

664 
	`¥ötf
(1, "create unlinkread failed\n");

665 
	`exô
();

667 
	`wrôe
(
fd
, "hello", 5);

668 
	`˛o£
(
fd
);

670 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

671 if(
fd
 < 0){

672 
	`¥ötf
(1, "open unlinkread failed\n");

673 
	`exô
();

675 if(
	`u∆ök
("unlinkread") != 0){

676 
	`¥ötf
(1, "unlink unlinkread failed\n");

677 
	`exô
();

680 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

681 
	`wrôe
(
fd1
, "yyy", 3);

682 
	`˛o£
(
fd1
);

684 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

685 
	`¥ötf
(1, "unlinkreadÑead failed");

686 
	`exô
();

688 if(
buf
[0] != 'h'){

689 
	`¥ötf
(1, "unlinkread wrong data\n");

690 
	`exô
();

692 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

693 
	`¥ötf
(1, "unlinkread write failed\n");

694 
	`exô
();

696 
	`˛o£
(
fd
);

697 
	`u∆ök
("unlinkread");

698 
	`¥ötf
(1, "unlinkread ok\n");

699 
	}
}

702 
	$lökã°
()

704 
fd
;

706 
	`¥ötf
(1, "linktest\n");

708 
	`u∆ök
("lf1");

709 
	`u∆ök
("lf2");

711 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

712 if(
fd
 < 0){

713 
	`¥ötf
(1, "createÜf1 failed\n");

714 
	`exô
();

716 if(
	`wrôe
(
fd
, "hello", 5) != 5){

717 
	`¥ötf
(1, "writeÜf1 failed\n");

718 
	`exô
();

720 
	`˛o£
(
fd
);

722 if(
	`lök
("lf1", "lf2") < 0){

723 
	`¥ötf
(1, "linkÜf1Üf2 failed\n");

724 
	`exô
();

726 
	`u∆ök
("lf1");

728 if(
	`›í
("lf1", 0) >= 0){

729 
	`¥ötf
(1, "unlinkedÜf1 but it is stillÅhere!\n");

730 
	`exô
();

733 
fd
 = 
	`›í
("lf2", 0);

734 if(
fd
 < 0){

735 
	`¥ötf
(1, "openÜf2 failed\n");

736 
	`exô
();

738 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

739 
	`¥ötf
(1, "readÜf2 failed\n");

740 
	`exô
();

742 
	`˛o£
(
fd
);

744 if(
	`lök
("lf2", "lf2") >= 0){

745 
	`¥ötf
(1, "linkÜf2Üf2 succeeded! oops\n");

746 
	`exô
();

749 
	`u∆ök
("lf2");

750 if(
	`lök
("lf2", "lf1") >= 0){

751 
	`¥ötf
(1, "linkÇon-existant succeeded! oops\n");

752 
	`exô
();

755 if(
	`lök
(".", "lf1") >= 0){

756 
	`¥ötf
(1, "link .Üf1 succeeded! oops\n");

757 
	`exô
();

760 
	`¥ötf
(1, "linktest ok\n");

761 
	}
}

765 
	$c⁄¸óã
()

767 
fûe
[3];

768 
i
, 
pid
, 
n
, 
fd
;

769 
Á
[40];

771 
ush‹t
 
öum
;

772 
«me
[14];

773 } 
de
;

775 
	`¥ötf
(1, "concreateÅest\n");

776 
fûe
[0] = 'C';

777 
fûe
[2] = '\0';

778 
i
 = 0; i < 40; i++){

779 
fûe
[1] = '0' + 
i
;

780 
	`u∆ök
(
fûe
);

781 
pid
 = 
	`f‹k
();

782 if(
pid
 && (
i
 % 3) == 1){

783 
	`lök
("C0", 
fûe
);

784 } if(
pid
 =0 && (
i
 % 5) == 1){

785 
	`lök
("C0", 
fûe
);

787 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

788 if(
fd
 < 0){

789 
	`¥ötf
(1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

790 
	`exô
();

792 
	`˛o£
(
fd
);

794 if(
pid
 == 0)

795 
	`exô
();

797 
	`waô
();

800 
	`mem£t
(
Á
, 0, (fa));

801 
fd
 = 
	`›í
(".", 0);

802 
n
 = 0;

803 
	`ªad
(
fd
, &
de
, (de)) > 0){

804 if(
de
.
öum
 == 0)

806 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

807 
i
 = 
de
.
«me
[1] - '0';

808 if(
i
 < 0 || i >(
Á
)){

809 
	`¥ötf
(1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

810 
	`exô
();

812 if(
Á
[
i
]){

813 
	`¥ötf
(1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

814 
	`exô
();

816 
Á
[
i
] = 1;

817 
n
++;

820 
	`˛o£
(
fd
);

822 if(
n
 != 40){

823 
	`¥ötf
(1, "concreateÇotÉnough files in directoryÜisting\n");

824 
	`exô
();

827 
i
 = 0; i < 40; i++){

828 
fûe
[1] = '0' + 
i
;

829 
pid
 = 
	`f‹k
();

830 if(
pid
 < 0){

831 
	`¥ötf
(1, "fork failed\n");

832 
	`exô
();

834 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

835 ((
i
 % 3Ë=1 && 
pid
 != 0)){

836 
	`˛o£
(
	`›í
(
fûe
, 0));

837 
	`˛o£
(
	`›í
(
fûe
, 0));

838 
	`˛o£
(
	`›í
(
fûe
, 0));

839 
	`˛o£
(
	`›í
(
fûe
, 0));

841 
	`u∆ök
(
fûe
);

842 
	`u∆ök
(
fûe
);

843 
	`u∆ök
(
fûe
);

844 
	`u∆ök
(
fûe
);

846 if(
pid
 == 0)

847 
	`exô
();

849 
	`waô
();

852 
	`¥ötf
(1, "concreate ok\n");

853 
	}
}

858 
	$löku∆ök
()

860 
pid
, 
i
;

862 
	`¥ötf
(1, "linkunlinkÅest\n");

864 
	`u∆ök
("x");

865 
pid
 = 
	`f‹k
();

866 if(
pid
 < 0){

867 
	`¥ötf
(1, "fork failed\n");

868 
	`exô
();

871 
x
 = (
pid
 ? 1 : 97);

872 
i
 = 0; i < 100; i++){

873 
x
 = x * 1103515245 + 12345;

874 if((
x
 % 3) == 0){

875 
	`˛o£
(
	`›í
("x", 
O_RDWR
 | 
O_CREATE
));

876 } if((
x
 % 3) == 1){

877 
	`lök
("cat", "x");

879 
	`u∆ök
("x");

883 if(
pid
)

884 
	`waô
();

886 
	`exô
();

888 
	`¥ötf
(1, "linkunlink ok\n");

889 
	}
}

893 
	$bigdú
()

895 
i
, 
fd
;

896 
«me
[10];

898 
	`¥ötf
(1, "bigdirÅest\n");

899 
	`u∆ök
("bd");

901 
fd
 = 
	`›í
("bd", 
O_CREATE
);

902 if(
fd
 < 0){

903 
	`¥ötf
(1, "bigdir create failed\n");

904 
	`exô
();

906 
	`˛o£
(
fd
);

908 
i
 = 0; i < 500; i++){

909 
«me
[0] = 'x';

910 
«me
[1] = '0' + (
i
 / 64);

911 
«me
[2] = '0' + (
i
 % 64);

912 
«me
[3] = '\0';

913 if(
	`lök
("bd", 
«me
) != 0){

914 
	`¥ötf
(1, "bigdirÜink failed\n");

915 
	`exô
();

919 
	`u∆ök
("bd");

920 
i
 = 0; i < 500; i++){

921 
«me
[0] = 'x';

922 
«me
[1] = '0' + (
i
 / 64);

923 
«me
[2] = '0' + (
i
 % 64);

924 
«me
[3] = '\0';

925 if(
	`u∆ök
(
«me
) != 0){

926 
	`¥ötf
(1, "bigdir unlink failed");

927 
	`exô
();

931 
	`¥ötf
(1, "bigdir ok\n");

932 
	}
}

935 
	$subdú
()

937 
fd
, 
cc
;

939 
	`¥ötf
(1, "subdirÅest\n");

941 
	`u∆ök
("ff");

942 if(
	`mkdú
("dd") != 0){

943 
	`¥ötf
(1, "subdir mkdir dd failed\n");

944 
	`exô
();

947 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

948 if(
fd
 < 0){

949 
	`¥ötf
(1, "create dd/ff failed\n");

950 
	`exô
();

952 
	`wrôe
(
fd
, "ff", 2);

953 
	`˛o£
(
fd
);

955 if(
	`u∆ök
("dd") >= 0){

956 
	`¥ötf
(1, "unlink dd (non-empty dir) succeeded!\n");

957 
	`exô
();

960 if(
	`mkdú
("/dd/dd") != 0){

961 
	`¥ötf
(1, "subdir mkdir dd/dd failed\n");

962 
	`exô
();

965 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

966 if(
fd
 < 0){

967 
	`¥ötf
(1, "create dd/dd/ff failed\n");

968 
	`exô
();

970 
	`wrôe
(
fd
, "FF", 2);

971 
	`˛o£
(
fd
);

973 
fd
 = 
	`›í
("dd/dd/../ff", 0);

974 if(
fd
 < 0){

975 
	`¥ötf
(1, "open dd/dd/../ff failed\n");

976 
	`exô
();

978 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

979 if(
cc
 !2 || 
buf
[0] != 'f'){

980 
	`¥ötf
(1, "dd/dd/../ff wrong content\n");

981 
	`exô
();

983 
	`˛o£
(
fd
);

985 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

986 
	`¥ötf
(1, "link dd/dd/ff dd/dd/ffff failed\n");

987 
	`exô
();

990 if(
	`u∆ök
("dd/dd/ff") != 0){

991 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

992 
	`exô
();

994 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

995 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded\n");

996 
	`exô
();

999 if(
	`chdú
("dd") != 0){

1000 
	`¥ötf
(1, "chdir dd failed\n");

1001 
	`exô
();

1003 if(
	`chdú
("dd/../../dd") != 0){

1004 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

1005 
	`exô
();

1007 if(
	`chdú
("dd/../../../dd") != 0){

1008 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

1009 
	`exô
();

1011 if(
	`chdú
("./..") != 0){

1012 
	`¥ötf
(1, "chdir ./.. failed\n");

1013 
	`exô
();

1016 
fd
 = 
	`›í
("dd/dd/ffff", 0);

1017 if(
fd
 < 0){

1018 
	`¥ötf
(1, "open dd/dd/ffff failed\n");

1019 
	`exô
();

1021 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

1022 
	`¥ötf
(1, "read dd/dd/ffff wrongÜen\n");

1023 
	`exô
();

1025 
	`˛o£
(
fd
);

1027 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

1028 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded!\n");

1029 
	`exô
();

1032 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1033 
	`¥ötf
(1, "create dd/ff/ff succeeded!\n");

1034 
	`exô
();

1036 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1037 
	`¥ötf
(1, "create dd/xx/ff succeeded!\n");

1038 
	`exô
();

1040 if(
	`›í
("dd", 
O_CREATE
) >= 0){

1041 
	`¥ötf
(1, "create dd succeeded!\n");

1042 
	`exô
();

1044 if(
	`›í
("dd", 
O_RDWR
) >= 0){

1045 
	`¥ötf
(1, "open ddÑdwr succeeded!\n");

1046 
	`exô
();

1048 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

1049 
	`¥ötf
(1, "open dd wronly succeeded!\n");

1050 
	`exô
();

1052 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

1053 
	`¥ötf
(1, "link dd/ff/ff dd/dd/xx succeeded!\n");

1054 
	`exô
();

1056 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

1057 
	`¥ötf
(1, "link dd/xx/ff dd/dd/xx succeeded!\n");

1058 
	`exô
();

1060 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

1061 
	`¥ötf
(1, "link dd/ff dd/dd/ffff succeeded!\n");

1062 
	`exô
();

1064 if(
	`mkdú
("dd/ff/ff") == 0){

1065 
	`¥ötf
(1, "mkdir dd/ff/ff succeeded!\n");

1066 
	`exô
();

1068 if(
	`mkdú
("dd/xx/ff") == 0){

1069 
	`¥ötf
(1, "mkdir dd/xx/ff succeeded!\n");

1070 
	`exô
();

1072 if(
	`mkdú
("dd/dd/ffff") == 0){

1073 
	`¥ötf
(1, "mkdir dd/dd/ffff succeeded!\n");

1074 
	`exô
();

1076 if(
	`u∆ök
("dd/xx/ff") == 0){

1077 
	`¥ötf
(1, "unlink dd/xx/ff succeeded!\n");

1078 
	`exô
();

1080 if(
	`u∆ök
("dd/ff/ff") == 0){

1081 
	`¥ötf
(1, "unlink dd/ff/ff succeeded!\n");

1082 
	`exô
();

1084 if(
	`chdú
("dd/ff") == 0){

1085 
	`¥ötf
(1, "chdir dd/ff succeeded!\n");

1086 
	`exô
();

1088 if(
	`chdú
("dd/xx") == 0){

1089 
	`¥ötf
(1, "chdir dd/xx succeeded!\n");

1090 
	`exô
();

1093 if(
	`u∆ök
("dd/dd/ffff") != 0){

1094 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

1095 
	`exô
();

1097 if(
	`u∆ök
("dd/ff") != 0){

1098 
	`¥ötf
(1, "unlink dd/ff failed\n");

1099 
	`exô
();

1101 if(
	`u∆ök
("dd") == 0){

1102 
	`¥ötf
(1, "unlinkÇon-empty dd succeeded!\n");

1103 
	`exô
();

1105 if(
	`u∆ök
("dd/dd") < 0){

1106 
	`¥ötf
(1, "unlink dd/dd failed\n");

1107 
	`exô
();

1109 if(
	`u∆ök
("dd") < 0){

1110 
	`¥ötf
(1, "unlink dd failed\n");

1111 
	`exô
();

1114 
	`¥ötf
(1, "subdir ok\n");

1115 
	}
}

1119 
	$bigwrôe
()

1121 
fd
, 
sz
;

1123 
	`¥ötf
(1, "bigwriteÅest\n");

1125 
	`u∆ök
("bigwrite");

1126 
sz
 = 499; sz < 12*512; sz += 471){

1127 
fd
 = 
	`›í
("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1128 if(
fd
 < 0){

1129 
	`¥ötf
(1, "cannot create bigwrite\n");

1130 
	`exô
();

1132 
i
;

1133 
i
 = 0; i < 2; i++){

1134 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
sz
);

1135 if(
cc
 !
sz
){

1136 
	`¥ötf
(1, "wrôe(%dËªà%d\n", 
sz
, 
cc
);

1137 
	`exô
();

1140 
	`˛o£
(
fd
);

1141 
	`u∆ök
("bigwrite");

1144 
	`¥ötf
(1, "bigwrite ok\n");

1145 
	}
}

1148 
	$bigfûe
()

1150 
fd
, 
i
, 
tŸÆ
, 
cc
;

1152 
	`¥ötf
(1, "bigfileÅest\n");

1154 
	`u∆ök
("bigfile");

1155 
fd
 = 
	`›í
("bigfûe", 
O_CREATE
 | 
O_RDWR
);

1156 if(
fd
 < 0){

1157 
	`¥ötf
(1, "cannot create bigfile");

1158 
	`exô
();

1160 
i
 = 0; i < 20; i++){

1161 
	`mem£t
(
buf
, 
i
, 600);

1162 if(
	`wrôe
(
fd
, 
buf
, 600) != 600){

1163 
	`¥ötf
(1, "write bigfile failed\n");

1164 
	`exô
();

1167 
	`˛o£
(
fd
);

1169 
fd
 = 
	`›í
("bigfile", 0);

1170 if(
fd
 < 0){

1171 
	`¥ötf
(1, "cannot open bigfile\n");

1172 
	`exô
();

1174 
tŸÆ
 = 0;

1175 
i
 = 0; ; i++){

1176 
cc
 = 
	`ªad
(
fd
, 
buf
, 300);

1177 if(
cc
 < 0){

1178 
	`¥ötf
(1, "read bigfile failed\n");

1179 
	`exô
();

1181 if(
cc
 == 0)

1183 if(
cc
 != 300){

1184 
	`¥ötf
(1, "shortÑead bigfile\n");

1185 
	`exô
();

1187 if(
buf
[0] !
i
/2 || buf[299] != i/2){

1188 
	`¥ötf
(1, "read bigfile wrong data\n");

1189 
	`exô
();

1191 
tŸÆ
 +
cc
;

1193 
	`˛o£
(
fd
);

1194 if(
tŸÆ
 != 20*600){

1195 
	`¥ötf
(1, "read bigfile wrongÅotal\n");

1196 
	`exô
();

1198 
	`u∆ök
("bigfile");

1200 
	`¥ötf
(1, "bigfileÅest ok\n");

1201 
	}
}

1204 
	$fouπìn
()

1206 
fd
;

1209 
	`¥ötf
(1, "fourteenÅest\n");

1211 if(
	`mkdú
("12345678901234") != 0){

1212 
	`¥ötf
(1, "mkdir 12345678901234 failed\n");

1213 
	`exô
();

1215 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1216 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 failed\n");

1217 
	`exô
();

1219 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1220 if(
fd
 < 0){

1221 
	`¥ötf
(1, "create 123456789012345/123456789012345/123456789012345 failed\n");

1222 
	`exô
();

1224 
	`˛o£
(
fd
);

1225 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1226 if(
fd
 < 0){

1227 
	`¥ötf
(1, "open 12345678901234/12345678901234/12345678901234 failed\n");

1228 
	`exô
();

1230 
	`˛o£
(
fd
);

1232 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1233 
	`¥ötf
(1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1234 
	`exô
();

1236 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1237 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1238 
	`exô
();

1241 
	`¥ötf
(1, "fourteen ok\n");

1242 
	}
}

1245 
	$rmdŸ
()

1247 
	`¥ötf
(1, "rmdotÅest\n");

1248 if(
	`mkdú
("dots") != 0){

1249 
	`¥ötf
(1, "mkdir dots failed\n");

1250 
	`exô
();

1252 if(
	`chdú
("dots") != 0){

1253 
	`¥ötf
(1, "chdir dots failed\n");

1254 
	`exô
();

1256 if(
	`u∆ök
(".") == 0){

1257 
	`¥ötf
(1, "rm . worked!\n");

1258 
	`exô
();

1260 if(
	`u∆ök
("..") == 0){

1261 
	`¥ötf
(1, "rm .. worked!\n");

1262 
	`exô
();

1264 if(
	`chdú
("/") != 0){

1265 
	`¥ötf
(1, "chdir / failed\n");

1266 
	`exô
();

1268 if(
	`u∆ök
("dots/.") == 0){

1269 
	`¥ötf
(1, "unlink dots/. worked!\n");

1270 
	`exô
();

1272 if(
	`u∆ök
("dots/..") == 0){

1273 
	`¥ötf
(1, "unlink dots/.. worked!\n");

1274 
	`exô
();

1276 if(
	`u∆ök
("dots") != 0){

1277 
	`¥ötf
(1, "unlink dots failed!\n");

1278 
	`exô
();

1280 
	`¥ötf
(1, "rmdot ok\n");

1281 
	}
}

1284 
	$dúfûe
()

1286 
fd
;

1288 
	`¥ötf
(1, "dir vs file\n");

1290 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1291 if(
fd
 < 0){

1292 
	`¥ötf
(1, "create dirfile failed\n");

1293 
	`exô
();

1295 
	`˛o£
(
fd
);

1296 if(
	`chdú
("dirfile") == 0){

1297 
	`¥ötf
(1, "chdir dirfile succeeded!\n");

1298 
	`exô
();

1300 
fd
 = 
	`›í
("dirfile/xx", 0);

1301 if(
fd
 >= 0){

1302 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1303 
	`exô
();

1305 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1306 if(
fd
 >= 0){

1307 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1308 
	`exô
();

1310 if(
	`mkdú
("dirfile/xx") == 0){

1311 
	`¥ötf
(1, "mkdir dirfile/xx succeeded!\n");

1312 
	`exô
();

1314 if(
	`u∆ök
("dirfile/xx") == 0){

1315 
	`¥ötf
(1, "unlink dirfile/xx succeeded!\n");

1316 
	`exô
();

1318 if(
	`lök
("README", "dirfile/xx") == 0){

1319 
	`¥ötf
(1, "linkÅo dirfile/xx succeeded!\n");

1320 
	`exô
();

1322 if(
	`u∆ök
("dirfile") != 0){

1323 
	`¥ötf
(1, "unlink dirfile failed!\n");

1324 
	`exô
();

1327 
fd
 = 
	`›í
(".", 
O_RDWR
);

1328 if(
fd
 >= 0){

1329 
	`¥ötf
(1, "open . for writing succeeded!\n");

1330 
	`exô
();

1332 
fd
 = 
	`›í
(".", 0);

1333 if(
	`wrôe
(
fd
, "x", 1) > 0){

1334 
	`¥ötf
(1, "write . succeeded!\n");

1335 
	`exô
();

1337 
	`˛o£
(
fd
);

1339 
	`¥ötf
(1, "dir vs file OK\n");

1340 
	}
}

1344 
	$úef
()

1346 
i
, 
fd
;

1348 
	`¥ötf
(1, "empty fileÇame\n");

1351 
i
 = 0; i < 50 + 1; i++){

1352 if(
	`mkdú
("irefd") != 0){

1353 
	`¥ötf
(1, "mkdir irefd failed\n");

1354 
	`exô
();

1356 if(
	`chdú
("irefd") != 0){

1357 
	`¥ötf
(1, "chdir irefd failed\n");

1358 
	`exô
();

1361 
	`mkdú
("");

1362 
	`lök
("README", "");

1363 
fd
 = 
	`›í
("", 
O_CREATE
);

1364 if(
fd
 >= 0)

1365 
	`˛o£
(
fd
);

1366 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1367 if(
fd
 >= 0)

1368 
	`˛o£
(
fd
);

1369 
	`u∆ök
("xx");

1372 
	`chdú
("/");

1373 
	`¥ötf
(1, "empty fileÇame OK\n");

1374 
	}
}

1380 
	$f‹kã°
()

1382 
n
, 
pid
;

1384 
	`¥ötf
(1, "forkÅest\n");

1386 
n
=0;Ç<1000;Ç++){

1387 
pid
 = 
	`f‹k
();

1388 if(
pid
 < 0)

1390 if(
pid
 == 0)

1391 
	`exô
();

1394 if(
n
 == 1000){

1395 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

1396 
	`exô
();

1399 ; 
n
 > 0;Ç--){

1400 if(
	`waô
() < 0){

1401 
	`¥ötf
(1, "wait stoppedÉarly\n");

1402 
	`exô
();

1406 if(
	`waô
() != -1){

1407 
	`¥ötf
(1, "wait gotÅoo many\n");

1408 
	`exô
();

1411 
	`¥ötf
(1, "forkÅest OK\n");

1412 
	}
}

1415 
	$sbrkã°
()

1417 
fds
[2], 
pid
, 
pids
[10], 
µid
;

1418 *
a
, *
b
, *
c
, *
œ°addr
, *
ﬁdbrk
, *
p
, 
s¸©ch
;

1419 
uöt
 
amt
;

1421 
	`¥ötf
(
°dout
, "sbrkÅest\n");

1422 
ﬁdbrk
 = 
	`sbrk
(0);

1425 
a
 = 
	`sbrk
(0);

1426 
i
;

1427 
i
 = 0; i < 5000; i++){

1428 
b
 = 
	`sbrk
(1);

1429 if(
b
 !
a
){

1430 
	`¥ötf
(
°dout
, "sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1431 
	`exô
();

1433 *
b
 = 1;

1434 
a
 = 
b
 + 1;

1436 
pid
 = 
	`f‹k
();

1437 if(
pid
 < 0){

1438 
	`¥ötf
(
°dout
, "sbrkÅest fork failed\n");

1439 
	`exô
();

1441 
c
 = 
	`sbrk
(1);

1442 
c
 = 
	`sbrk
(1);

1443 if(
c
 !
a
 + 1){

1444 
	`¥ötf
(
°dout
, "sbrkÅest failedÖost-fork\n");

1445 
	`exô
();

1447 if(
pid
 == 0)

1448 
	`exô
();

1449 
	`waô
();

1452 
	#BIG
 (100*1024*1024)

	)

1453 
a
 = 
	`sbrk
(0);

1454 
amt
 = (
BIG
Ë- (
uöt
)
a
;

1455 
p
 = 
	`sbrk
(
amt
);

1456 i‡(
p
 !
a
) {

1457 
	`¥ötf
(
°dout
, "sbrkÅest failedÅo grow bigáddress space;ÉnoughÖhys mem?\n");

1458 
	`exô
();

1460 
œ°addr
 = (*Ë(
BIG
-1);

1461 *
œ°addr
 = 99;

1464 
a
 = 
	`sbrk
(0);

1465 
c
 = 
	`sbrk
(-4096);

1466 if(
c
 == (*)0xffffffff){

1467 
	`¥ötf
(
°dout
, "sbrk couldÇot deallocate\n");

1468 
	`exô
();

1470 
c
 = 
	`sbrk
(0);

1471 if(
c
 !
a
 - 4096){

1472 
	`¥ötf
(
°dout
, "sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
, 
c
);

1473 
	`exô
();

1477 
a
 = 
	`sbrk
(0);

1478 
c
 = 
	`sbrk
(4096);

1479 if(
c
 !
a
 || 
	`sbrk
(0) !=á + 4096){

1480 
	`¥ötf
(
°dout
, "sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1481 
	`exô
();

1483 if(*
œ°addr
 == 99){

1485 
	`¥ötf
(
°dout
, "sbrk de-allocation didn'tÑeally deallocate\n");

1486 
	`exô
();

1489 
a
 = 
	`sbrk
(0);

1490 
c
 = 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1491 if(
c
 !
a
){

1492 
	`¥ötf
(
°dout
, "sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1493 
	`exô
();

1497 
a
 = (*)(
KERNBASE
);á < (*) (KERNBASE+2000000);á += 50000){

1498 
µid
 = 
	`gëpid
();

1499 
pid
 = 
	`f‹k
();

1500 if(
pid
 < 0){

1501 
	`¥ötf
(
°dout
, "fork failed\n");

1502 
	`exô
();

1504 if(
pid
 == 0){

1505 
	`¥ötf
(
°dout
, "o›†couldÑód %x = %x\n", 
a
, *a);

1506 
	`kûl
(
µid
);

1507 
	`exô
();

1509 
	`waô
();

1514 if(
	`pùe
(
fds
) != 0){

1515 
	`¥ötf
(1, "pipe() failed\n");

1516 
	`exô
();

1518 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1519 if((
pids
[
i
] = 
	`f‹k
()) == 0){

1521 
	`sbrk
(
BIG
 - (
uöt
)sbrk(0));

1522 
	`wrôe
(
fds
[1], "x", 1);

1524 ;;Ë
	`¶ìp
(1000);

1526 if(
pids
[
i
] != -1)

1527 
	`ªad
(
fds
[0], &
s¸©ch
, 1);

1531 
c
 = 
	`sbrk
(4096);

1532 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1533 if(
pids
[
i
] == -1)

1535 
	`kûl
(
pids
[
i
]);

1536 
	`waô
();

1538 if(
c
 == (*)0xffffffff){

1539 
	`¥ötf
(
°dout
, "failed sbrkÜeaked memory\n");

1540 
	`exô
();

1543 if(
	`sbrk
(0Ë> 
ﬁdbrk
)

1544 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1546 
	`¥ötf
(
°dout
, "sbrkÅest OK\n");

1547 
	}
}

1550 
	$vÆid©eöt
(*
p
)

1552 
ªs
;

1553 
	`asm
("mov %%esp, %%ebx\n\t"

1557 "˜" (
ªs
) :

1558 "a" (
SYS_¶ìp
), "n" (
T_SYSCALL
), "c" (
p
) :

1560 
	}
}

1563 
	$vÆid©ëe°
()

1565 
hi
, 
pid
;

1566 
uöt
 
p
;

1568 
	`¥ötf
(
°dout
, "validateÅest\n");

1569 
hi
 = 1100*1024;

1571 
p
 = 0;Ö <(
uöt
)
hi
;Ö += 4096){

1572 if((
pid
 = 
	`f‹k
()) == 0){

1574 
	`vÆid©eöt
((*)
p
);

1575 
	`exô
();

1577 
	`¶ìp
(0);

1578 
	`¶ìp
(0);

1579 
	`kûl
(
pid
);

1580 
	`waô
();

1583 if(
	`lök
("nosuchfûe", (*)
p
) != -1){

1584 
	`¥ötf
(
°dout
, "link shouldÇot succeed\n");

1585 
	`exô
();

1589 
	`¥ötf
(
°dout
, "validate ok\n");

1590 
	}
}

1593 
	gunöô
[10000];

1595 
	$bs°e°
()

1597 
i
;

1599 
	`¥ötf
(
°dout
, "bssÅest\n");

1600 
i
 = 0; i < (
unöô
); i++){

1601 if(
unöô
[
i
] != '\0'){

1602 
	`¥ötf
(
°dout
, "bssÅest failed\n");

1603 
	`exô
();

1606 
	`¥ötf
(
°dout
, "bssÅest ok\n");

1607 
	}
}

1613 
	$big¨gã°
()

1615 
pid
, 
fd
;

1617 
	`u∆ök
("bigarg-ok");

1618 
pid
 = 
	`f‹k
();

1619 if(
pid
 == 0){

1620 *
¨gs
[
MAXARG
];

1621 
i
;

1622 
i
 = 0; i < 
MAXARG
-1; i++)

1623 
¨gs
[
i
] = "bigargsÅest: failed\n ";

1624 
¨gs
[
MAXARG
-1] = 0;

1625 
	`¥ötf
(
°dout
, "bigargÅest\n");

1626 
	`exec
("echo", 
¨gs
);

1627 
	`¥ötf
(
°dout
, "bigargÅest ok\n");

1628 
fd
 = 
	`›í
("big¨g-ok", 
O_CREATE
);

1629 
	`˛o£
(
fd
);

1630 
	`exô
();

1631 } if(
pid
 < 0){

1632 
	`¥ötf
(
°dout
, "bigargtest: fork failed\n");

1633 
	`exô
();

1635 
	`waô
();

1636 
fd
 = 
	`›í
("bigarg-ok", 0);

1637 if(
fd
 < 0){

1638 
	`¥ötf
(
°dout
, "bigargÅest failed!\n");

1639 
	`exô
();

1641 
	`˛o£
(
fd
);

1642 
	`u∆ök
("bigarg-ok");

1643 
	}
}

1648 
	$fsfuŒ
()

1650 
nfûes
;

1651 
fsblocks
 = 0;

1653 
	`¥ötf
(1, "fsfullÅest\n");

1655 
nfûes
 = 0; ;Çfiles++){

1656 
«me
[64];

1657 
«me
[0] = 'f';

1658 
«me
[1] = '0' + 
nfûes
 / 1000;

1659 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1660 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1661 
«me
[4] = '0' + (
nfûes
 % 10);

1662 
«me
[5] = '\0';

1663 
	`¥ötf
(1, "wrôög %s\n", 
«me
);

1664 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

1665 if(
fd
 < 0){

1666 
	`¥ötf
(1, "›í %†Áûed\n", 
«me
);

1669 
tŸÆ
 = 0;

1671 
cc
 = 
	`wrôe
(
fd
, 
buf
, 512);

1672 if(
cc
 < 512)

1674 
tŸÆ
 +
cc
;

1675 
fsblocks
++;

1677 
	`¥ötf
(1, "wrŸê%d byãs\n", 
tŸÆ
);

1678 
	`˛o£
(
fd
);

1679 if(
tŸÆ
 == 0)

1683 
nfûes
 >= 0){

1684 
«me
[64];

1685 
«me
[0] = 'f';

1686 
«me
[1] = '0' + 
nfûes
 / 1000;

1687 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1688 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1689 
«me
[4] = '0' + (
nfûes
 % 10);

1690 
«me
[5] = '\0';

1691 
	`u∆ök
(
«me
);

1692 
nfûes
--;

1695 
	`¥ötf
(1, "fsfullÅest finished\n");

1696 
	}
}

1698 
	gønd°©e
 = 1;

1700 
	$ønd
()

1702 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1703  
ønd°©e
;

1704 
	}
}

1707 
	$maö
(
¨gc
, *
¨gv
[])

1709 
	`¥ötf
(1, "usertests starting\n");

1711 if(
	`›í
("usertests.ran", 0) >= 0){

1712 
	`¥ötf
(1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1713 
	`exô
();

1715 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

1717 
	`¸óãdñëe
();

1718 
	`löku∆ök
();

1719 
	`c⁄¸óã
();

1720 
	`fourfûes
();

1721 
	`sh¨edfd
();

1723 
	`big¨gã°
();

1724 
	`bigwrôe
();

1725 
	`big¨gã°
();

1726 
	`bs°e°
();

1727 
	`sbrkã°
();

1728 
	`vÆid©ëe°
();

1730 
	`›íã°
();

1731 
	`wrôëe°
();

1732 
	`wrôëe°1
();

1733 
	`¸óãã°
();

1735 
	`›íùuâe°
();

1736 
	`exôùuâe°
();

1737 
	`ùuâe°
();

1739 
	`mem
();

1740 
	`pùe1
();

1741 
	`¥ìm±
();

1742 
	`exôwaô
();

1744 
	`rmdŸ
();

1745 
	`fouπìn
();

1746 
	`bigfûe
();

1747 
	`subdú
();

1748 
	`lökã°
();

1749 
	`u∆ökªad
();

1750 
	`dúfûe
();

1751 
	`úef
();

1752 
	`f‹kã°
();

1753 
	`bigdú
();

1754 
	`exe˘e°
();

1756 
	`exô
();

1757 
	}
}

	@vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"defs.h
"

4 
	~"x86.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"ñf.h
"

10 
d©a
[];

11 
pde_t
 *
	gkpgdú
;

12 
£gdesc
 
	ggdt
[
NSEGS
];

17 
	$£göô
()

19 
˝u
 *
c
;

25 
c
 = &
˝us
[
	`˝unum
()];

26 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 0);

27 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 0);

28 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 
DPL_USER
);

29 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 
DPL_USER
);

32 
c
->
gdt
[
SEG_KCPU
] = 
	`SEG
(
STA_W
, &c->
˝u
, 8, 0);

34 
	`lgdt
(
c
->
gdt
, (c->gdt));

35 
	`lﬂdgs
(
SEG_KCPU
 << 3);

38 
˝u
 = 
c
;

39 
¥oc
 = 0;

40 
	}
}

45 
±e_t
 *

46 
	$wÆkpgdú
(
pde_t
 *
pgdú
, c⁄° *
va
, 
Æloc
)

48 
pde_t
 *
pde
;

49 
±e_t
 *
pgèb
;

51 
pde
 = &
pgdú
[
	`PDX
(
va
)];

52 if(*
pde
 & 
PTE_P
){

53 
pgèb
 = (
±e_t
*)
	`p2v
(
	`PTE_ADDR
(*
pde
));

55 if(!
Æloc
 || (
pgèb
 = (
±e_t
*)
	`kÆloc
()) == 0)

58 
	`mem£t
(
pgèb
, 0, 
PGSIZE
);

62 *
pde
 = 
	`v2p
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

64  &
pgèb
[
	`PTX
(
va
)];

65 
	}
}

71 
	$m≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
)

73 *
a
, *
œ°
;

74 
±e_t
 *
±e
;

76 
a
 = (*)
	`PGROUNDDOWN
((
uöt
)
va
);

77 
œ°
 = (*)
	`PGROUNDDOWN
(((
uöt
)
va
Ë+ 
size
 - 1);

79 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
a
, 1)) == 0)

81 if(*
±e
 & 
PTE_P
)

82 
	`∑nic
("remap");

83 *
±e
 = 
∑
 | 
≥rm
 | 
PTE_P
;

84 if(
a
 =
œ°
)

86 
a
 +
PGSIZE
;

87 
∑
 +
PGSIZE
;

90 
	}
}

115 
	skm≠
 {

116 *
	mvút
;

117 
uöt
 
	mphys_°¨t
;

118 
uöt
 
	mphys_íd
;

119 
	m≥rm
;

120 } 
	gkm≠
[] = {

121 { (*)
KERNBASE
, 0, 
EXTMEM
, 
PTE_W
},

122 { (*)
KERNLINK
, 
V2P
(KERNLINK), V2P(
d©a
), 0},

123 { (*)
d©a
, 
V2P
(d©a), 
PHYSTOP
, 
PTE_W
},

124 { (*)
DEVSPACE
, DEVSPACE, 0, 
PTE_W
},

128 
pde_t
*

129 
	$£tupkvm
()

131 
pde_t
 *
pgdú
;

132 
km≠
 *
k
;

134 if((
pgdú
 = (
pde_t
*)
	`kÆloc
()) == 0)

136 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

137 i‡(
	`p2v
(
PHYSTOP
Ë> (*)
DEVSPACE
)

138 
	`∑nic
("PHYSTOPÅoo high");

139 
k
 = 
km≠
; k < &km≠[
	`NELEM
(kmap)]; k++)

140 if(
	`m≠∑ges
(
pgdú
, 
k
->
vút
, k->
phys_íd
 - k->
phys_°¨t
,

141 (
uöt
)
k
->
phys_°¨t
, k->
≥rm
) < 0)

143  
pgdú
;

144 
	}
}

149 
	$kvmÆloc
()

151 
kpgdú
 = 
	`£tupkvm
();

152 
	`swôchkvm
();

153 
	}
}

158 
	$swôchkvm
()

160 
	`l¸3
(
	`v2p
(
kpgdú
));

161 
	}
}

165 
	$swôchuvm
(
¥oc
 *
p
)

167 
	`push˛i
();

168 
˝u
->
gdt
[
SEG_TSS
] = 
	`SEG16
(
STS_T32A
, &˝u->
ts
, (cpu->ts)-1, 0);

169 
˝u
->
gdt
[
SEG_TSS
].
s
 = 0;

170 
˝u
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

171 
˝u
->
ts
.
e•0
 = (
uöt
)
¥oc
->
k°ack
 + 
KSTACKSIZE
;

172 
	`…r
(
SEG_TSS
 << 3);

173 if(
p
->
pgdú
 == 0)

174 
	`∑nic
("switchuvm:ÇoÖgdir");

175 
	`l¸3
(
	`v2p
(
p
->
pgdú
));

176 
	`p›˛i
();

177 
	}
}

182 
	$öôuvm
(
pde_t
 *
pgdú
, *
öô
, 
uöt
 
sz
)

184 *
mem
;

186 if(
sz
 >
PGSIZE
)

187 
	`∑nic
("inituvm: moreÅhanáÖage");

188 
mem
 = 
	`kÆloc
();

189 
	`mem£t
(
mem
, 0, 
PGSIZE
);

190 
	`m≠∑ges
(
pgdú
, 0, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

191 
	`memmove
(
mem
, 
öô
, 
sz
);

192 
	}
}

197 
	$lﬂduvm
(
pde_t
 *
pgdú
, *
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

199 
uöt
 
i
, 
∑
, 
n
;

200 
±e_t
 *
±e
;

202 if((
uöt
Ë
addr
 % 
PGSIZE
 != 0)

203 
	`∑nic
("loaduvm:áddr must beÖageáligned");

204 
i
 = 0; i < 
sz
; i +
PGSIZE
){

205 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
addr
+
i
, 0)) == 0)

206 
	`∑nic
("loaduvm:áddress shouldÉxist");

207 
∑
 = 
	`PTE_ADDR
(*
±e
);

208 if(
sz
 - 
i
 < 
PGSIZE
)

209 
n
 = 
sz
 - 
i
;

211 
n
 = 
PGSIZE
;

212 if(
	`ªadi
(
ù
, 
	`p2v
(
∑
), 
off£t
+
i
, 
n
) !=Ç)

216 
	}
}

221 
	$Ælocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

223 *
mem
;

224 
uöt
 
a
;

226 if(
√wsz
 >
KERNBASE
)

228 if(
√wsz
 < 
ﬁdsz
)

229  
ﬁdsz
;

231 
a
 = 
	`PGROUNDUP
(
ﬁdsz
);

232 ; 
a
 < 
√wsz
;á +
PGSIZE
){

233 
mem
 = 
	`kÆloc
();

234 if(
mem
 == 0){

235 
	`˝rötf
("allocuvm out of memory\n");

236 
	`dóŒocuvm
(
pgdú
, 
√wsz
, 
ﬁdsz
);

239 
	`mem£t
(
mem
, 0, 
PGSIZE
);

240 
	`m≠∑ges
(
pgdú
, (*)
a
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

242  
√wsz
;

243 
	}
}

250 
	$dóŒocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

252 
±e_t
 *
±e
;

253 
uöt
 
a
, 
∑
;

255 if(
√wsz
 >
ﬁdsz
)

256  
ﬁdsz
;

258 
a
 = 
	`PGROUNDUP
(
√wsz
);

259 ; 
a
 < 
ﬁdsz
;á +
PGSIZE
){

260 
±e
 = 
	`wÆkpgdú
(
pgdú
, (*)
a
, 0);

261 if(!
±e
)

262 
a
 +(
NPTENTRIES
 - 1Ë* 
PGSIZE
;

263 if((*
±e
 & 
PTE_P
) != 0){

264 
∑
 = 
	`PTE_ADDR
(*
±e
);

265 if(
∑
 == 0)

266 
	`∑nic
("kfree");

267 *
v
 = 
	`p2v
(
∑
);

268 
	`k‰ì
(
v
);

269 *
±e
 = 0;

272  
√wsz
;

273 
	}
}

278 
	$‰ìvm
(
pde_t
 *
pgdú
)

280 
uöt
 
i
;

282 if(
pgdú
 == 0)

283 
	`∑nic
("freevm:ÇoÖgdir");

284 
	`dóŒocuvm
(
pgdú
, 
KERNBASE
, 0);

285 
i
 = 0; i < 
NPDENTRIES
; i++){

286 if(
pgdú
[
i
] & 
PTE_P
){

287 * 
v
 = 
	`p2v
(
	`PTE_ADDR
(
pgdú
[
i
]));

288 
	`k‰ì
(
v
);

291 
	`k‰ì
((*)
pgdú
);

292 
	}
}

297 
	$˛óΩãu
(
pde_t
 *
pgdú
, *
uva
)

299 
±e_t
 *
±e
;

301 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

302 if(
±e
 == 0)

303 
	`∑nic
("clearpteu");

304 *
±e
 &~
PTE_U
;

305 
	}
}

309 
pde_t
*

310 
	$c›yuvm
(
pde_t
 *
pgdú
, 
uöt
 
sz
)

312 
pde_t
 *
d
;

313 
±e_t
 *
±e
;

314 
uöt
 
∑
, 
i
, 
Êags
;

315 *
mem
;

317 if((
d
 = 
	`£tupkvm
()) == 0)

319 
i
 = 0; i < 
sz
; i +
PGSIZE
){

320 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, (*Ë
i
, 0)) == 0)

321 
	`∑nic
("copyuvm:Öte shouldÉxist");

322 if(!(*
±e
 & 
PTE_P
))

323 
	`∑nic
("copyuvm:ÖageÇotÖresent");

324 
∑
 = 
	`PTE_ADDR
(*
±e
);

325 
Êags
 = 
	`PTE_FLAGS
(*
±e
);

326 if((
mem
 = 
	`kÆloc
()) == 0)

327 
bad
;

328 
	`memmove
(
mem
, (*)
	`p2v
(
∑
), 
PGSIZE
);

329 if(
	`m≠∑ges
(
d
, (*)
i
, 
PGSIZE
, 
	`v2p
(
mem
), 
Êags
) < 0)

330 
bad
;

332  
d
;

334 
bad
:

335 
	`‰ìvm
(
d
);

337 
	}
}

342 
	$uva2ka
(
pde_t
 *
pgdú
, *
uva
)

344 
±e_t
 *
±e
;

346 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

347 if((*
±e
 & 
PTE_P
) == 0)

349 if((*
±e
 & 
PTE_U
) == 0)

351  (*)
	`p2v
(
	`PTE_ADDR
(*
±e
));

352 
	}
}

358 
	$c›yout
(
pde_t
 *
pgdú
, 
uöt
 
va
, *
p
, uöà
Àn
)

360 *
buf
, *
∑0
;

361 
uöt
 
n
, 
va0
;

363 
buf
 = (*)
p
;

364 
Àn
 > 0){

365 
va0
 = (
uöt
)
	`PGROUNDDOWN
(
va
);

366 
∑0
 = 
	`uva2ka
(
pgdú
, (*)
va0
);

367 if(
∑0
 == 0)

369 
n
 = 
PGSIZE
 - (
va
 - 
va0
);

370 if(
n
 > 
Àn
)

371 
n
 = 
Àn
;

372 
	`memmove
(
∑0
 + (
va
 - 
va0
), 
buf
, 
n
);

373 
Àn
 -
n
;

374 
buf
 +
n
;

375 
va
 = 
va0
 + 
PGSIZE
;

378 
	}
}

	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
(1, "wc:ÑeadÉrror\n");

30 
	`exô
();

32 
	`¥ötf
(1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
();

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
(1, "wc: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
();

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
();

54 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
(
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

15 
asm
 volatile("cld;Ñep insl" :

16 "=D" (
addr
), "=c" (
˙t
) :

17 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

19 
	}
}

21 
ölöe
 

22 
	$outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

25 
	}
}

27 
ölöe
 

28 
	$outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

31 
	}
}

33 
ölöe
 

34 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 
asm
 volatile("cld;Ñep outsl" :

37 "=S" (
addr
), "=c" (
˙t
) :

38 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

40 
	}
}

42 
ölöe
 

43 
	$°osb
(*
addr
, 
d©a
, 
˙t
)

45 
asm
 volatile("cld;Ñep stosb" :

46 "=D" (
addr
), "=c" (
˙t
) :

47 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

49 
	}
}

51 
ölöe
 

52 
	$°o¶
(*
addr
, 
d©a
, 
˙t
)

54 
asm
 volatile("cld;Ñep stosl" :

55 "=D" (
addr
), "=c" (
˙t
) :

56 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

58 
	}
}

60 
	g£gdesc
;

62 
ölöe
 

63 
	$lgdt
(
£gdesc
 *
p
, 
size
)

65 vﬁ©ûê
ush‹t
 
pd
[3];

67 
pd
[0] = 
size
-1;

68 
pd
[1] = (
uöt
)
p
;

69 
pd
[2] = (
uöt
)
p
 >> 16;

71 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

72 
	}
}

74 
	gg©edesc
;

76 
ölöe
 

77 
	$lidt
(
g©edesc
 *
p
, 
size
)

79 vﬁ©ûê
ush‹t
 
pd
[3];

81 
pd
[0] = 
size
-1;

82 
pd
[1] = (
uöt
)
p
;

83 
pd
[2] = (
uöt
)
p
 >> 16;

85 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

86 
	}
}

88 
ölöe
 

89 
	$…r
(
ush‹t
 
£l
)

91 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

92 
	}
}

94 
ölöe
 
uöt


95 
	$ªadeÊags
()

97 
uöt
 
eÊags
;

98 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

99  
eÊags
;

100 
	}
}

102 
ölöe
 

103 
	$lﬂdgs
(
ush‹t
 
v
)

105 
asm
 vﬁ©ûe("movw %0, %%gs" : : "r" (
v
));

106 
	}
}

108 
ölöe
 

109 
	$˛i
()

111 
asm
 volatile("cli");

112 
	}
}

114 
ölöe
 

115 
	$°i
()

117 
asm
 volatile("sti");

118 
	}
}

120 
ölöe
 
uöt


121 
	$xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

123 
uöt
 
ªsu…
;

126 
asm
 volatile("lock; xchgl %0, %1" :

127 "+m" (*
addr
), "˜" (
ªsu…
) :

128 "1" (
√wvÆ
) :

130  
ªsu…
;

131 
	}
}

133 
ölöe
 
uöt


134 
	$r¸2
()

136 
uöt
 
vÆ
;

137 
asm
 vﬁ©ûe("mov»%%¸2,%0" : "Ù" (
vÆ
));

138  
vÆ
;

139 
	}
}

141 
ölöe
 

142 
	$l¸3
(
uöt
 
vÆ
)

144 
asm
 vﬁ©ûe("mov»%0,%%¸3" : : "r" (
vÆ
));

145 
	}
}

150 
	så≠‰ame
 {

152 
uöt
 
	medi
;

153 
uöt
 
	mesi
;

154 
uöt
 
	mebp
;

155 
uöt
 
	m€•
;

156 
uöt
 
	mebx
;

157 
uöt
 
	medx
;

158 
uöt
 
	mecx
;

159 
uöt
 
	móx
;

162 
ush‹t
 
	mgs
;

163 
ush‹t
 
	m∑ddög1
;

164 
ush‹t
 
	mfs
;

165 
ush‹t
 
	m∑ddög2
;

166 
ush‹t
 
	mes
;

167 
ush‹t
 
	m∑ddög3
;

168 
ush‹t
 
	mds
;

169 
ush‹t
 
	m∑ddög4
;

170 
uöt
 
	må≠no
;

173 
uöt
 
	mîr
;

174 
uöt
 
	meù
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
uöt
 
	meÊags
;

180 
uöt
 
	me•
;

181 
ush‹t
 
	mss
;

182 
ush‹t
 
	m∑ddög6
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
();

14 
	}
}

	@
1
.
0
72
561
asm.h
bio.c
bootmain.c
buf.h
callparent.c
cat.c
console.c
defs.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
forktest.c
fs.c
fs.h
grep.c
ide.c
init.c
ioapic.c
kalloc.c
kbd.c
kbd.h
kill.c
kthread.c
lapic.c
ln.c
log.c
ls.c
main.c
memide.c
memlayout.h
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
parent.c
picirq.c
pipe.c
printf.c
proc.c
proc.h
qthread.c
qthread.h
rm.c
sh.c
spinlock.c
spinlock.h
stat.h
stressfs.c
string.c
syscall.c
syscall.h
sysfile.c
sysproc.c
testct.c
timer.c
trap.c
traps.h
types.h
uart.c
ulib.c
umalloc.c
user.h
usertests.c
vm.c
wc.c
x86.h
zombie.c
